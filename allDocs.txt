<h2 id="month-2024-08">[button href=^#month-2024-08^ class=^copyLink^]2024-08<span class="material-icons spaceLeft">link</span>[/button]</h2>
<ul class="changelogList">
  <li>Implemented async component loading with the new asyncLoad function; Added get-component-loading-content hook for customizable asyncLoad placeholders; Updated example everywhere.js with new hook; Added a helper function that can generate unique IDs <a href="https://github.com/HousebirdGames/Birdhouse/commit/188dbd8" class="commit">(Commit 188dbd8)</a></li>
  <li>Improved hooks to accept multiple callbacks per hook; Added functions to clear and remove hooks; Implemented "opened-popup" hook in popupManager, triggered when a popup was opened; Updated example in everywhere.js to include the new "opened-popup" hook; Fixed bug where links did not work correctly in popups <a href="https://github.com/HousebirdGames/Birdhouse/commit/0bc02b1" class="commit">(Commit 0bc02b1)</a></li>
  <li>Implemented optional back navigation for popup closure; Added 'backNavigationClosesPopups' config option (default: true) <a href="https://github.com/HousebirdGames/Birdhouse/commit/7f80ab8" class="commit">(Commit 7f80ab8)</a></li>
  <li>Infinite scroll enhancement: Configurable scroll container (default: window) and improved debounce behavior <a href="https://github.com/HousebirdGames/Birdhouse/commit/7dabf73" class="commit">(Commit 7dabf73)</a></li>
</ul>
<h2 id="month-2024-07">[button href=^#month-2024-07^ class=^copyLink^]2024-07<span class="material-icons spaceLeft">link</span>[/button]</h2>
<ul class="changelogList">
  <li>Updated infinite scroll offline message; Update LICENSE.txt to include "(c)" <a href="https://github.com/HousebirdGames/Birdhouse/commit/2652632" class="commit">(Commit 2652632)</a></li>
  <li>Improved action unmounting <a href="https://github.com/HousebirdGames/Birdhouse/commit/c16a4f7" class="commit">(Commit c16a4f7)</a></li>
  <li>Added support for multiple menu buttons; Added support for multiple install buttons; Default menu HTML anchor elements now have their 'name' set as the 'title' attribute; Added title attribute to example close menu button <a href="https://github.com/HousebirdGames/Birdhouse/commit/4166247" class="commit">(Commit 4166247)</a></li>
</ul>
<h2 id="month-2024-06">[button href=^#month-2024-06^ class=^copyLink^]2024-06<span class="material-icons spaceLeft">link</span>[/button]</h2>
<ul class="changelogList">
  <li>Middle mouse button is now excluded from triggering route navigation <a href="https://github.com/HousebirdGames/Birdhouse/commit/a9acb59" class="commit">(Commit a9acb59)</a></li>
  <li>Added the new createRoute function that simplifies route creation <a href="https://github.com/HousebirdGames/Birdhouse/commit/db17d75" class="commit">(Commit db17d75)</a></li>
  <li>Actions that are added without a specified type (i.e. 'click') will now default to the defaultClickEvent <a href="https://github.com/HousebirdGames/Birdhouse/commit/18e797d" class="commit">(Commit 18e797d)</a></li>
  <li>Updated serve.js watcher to exclude 'node_modules'; Enhanced triggering of action system warnings <a href="https://github.com/HousebirdGames/Birdhouse/commit/7583948" class="commit">(Commit 7583948)</a></li>
</ul>
<h2 id="month-2024-05">[button href=^#month-2024-05^ class=^copyLink^]2024-05<span class="material-icons spaceLeft">link</span>[/button]</h2>
<ul class="changelogList">
  <li>Added examples to the documentation of the action system as well as an additional warning log <a href="https://github.com/HousebirdGames/Birdhouse/commit/12998de" class="commit">(Commit 12998de)</a></li>
  <li>Enabled alternative port detection in serve.js; Added additional logging to serve.js <a href="https://github.com/HousebirdGames/Birdhouse/commit/449a405" class="commit">(Commit 449a405)</a></li>
  <li>Updated pipeline logging <a href="https://github.com/HousebirdGames/Birdhouse/commit/fb498c0" class="commit">(Commit fb498c0)</a></li>
  <li>Disabling Scroll Recall: Configuring scrollPositionRecallLimit to zero or a negative value will now deactivate the scroll position recall feature; Updated docs comment for the scroll function in main.js <a href="https://github.com/HousebirdGames/Birdhouse/commit/015eb32" class="commit">(Commit 015eb32)</a></li>
  <li>Added scrollPositionRecallLimit property to the config <a href="https://github.com/HousebirdGames/Birdhouse/commit/8599061" class="commit">(Commit 8599061)</a></li>
  <li>Added scroll position restoration to the scroll function <a href="https://github.com/HousebirdGames/Birdhouse/commit/7ba85c0" class="commit">(Commit 7ba85c0)</a></li>
  <li>Link clicks are now correctly prevented when useMouseDown is enabled <a href="https://github.com/HousebirdGames/Birdhouse/commit/bb567e4" class="commit">(Commit bb567e4)</a></li>
  <li>Added defaultClickEvent as new exported variable to main.js; Added useMouseDown property to the config that allows to set the default click event to "mousedown" which is used for certain acitons/listeners like link clicks <a href="https://github.com/HousebirdGames/Birdhouse/commit/3e3abac" class="commit">(Commit 3e3abac)</a></li>
  <li>Textarea resizing is now correctly setup when routes are changed <a href="https://github.com/HousebirdGames/Birdhouse/commit/0b1e928" class="commit">(Commit 0b1e928)</a></li>
  <li>Updated package.json and comments <a href="https://github.com/HousebirdGames/Birdhouse/commit/595ecb5" class="commit">(Commit 595ecb5)</a></li>
  <li>Updated comments; Updated Birdhouse version <a href="https://github.com/HousebirdGames/Birdhouse/commit/4afbea8" class="commit">(Commit 4afbea8)</a></li>
  <li>Serve now correctly restarts the local server; The packaging process and pipeline now create a config.json; Added trustedImageDomains to the config that will determine the allowed image sources for electron <a href="https://github.com/HousebirdGames/Birdhouse/commit/0a8959a" class="commit">(Commit 0a8959a)</a></li>
  <li>Updated comments <a href="https://github.com/HousebirdGames/Birdhouse/commit/0615c71" class="commit">(Commit 0615c71)</a></li>
  <li>Implemented experimental Electron packaging for windows;  Added the option to generate a .icon file with the pipeline; Added exported variable to check if the app is running standalone (in Electron); Improved automated title update timing; on-handle-route-change now is placed even before removement of old component css and action; Added .ico to the example root folder;  Implemented automated port search for the server, allowing for multiple Birdhouse applications running on the same system; Updated Readme; Updated .gitignore <a href="https://github.com/HousebirdGames/Birdhouse/commit/3a2332e" class="commit">(Commit 3a2332e)</a></li>
  <li>Removed bin from package-lock.json <a href="https://github.com/HousebirdGames/Birdhouse/commit/55856f5" class="commit">(Commit 55856f5)</a></li>
  <li>Added the option to run serve.js and server.js with a custom port; Improved warnings and error handling for server.js; Updated README.md with instructions for serving the app locally with a specified port; The new default port for server.js is 4200; Pipeline now supports post release scripts for local builds <a href="https://github.com/HousebirdGames/Birdhouse/commit/b3fb679" class="commit">(Commit b3fb679)</a></li>
  <li>Added the option to deploy/build the app through the pipeline while having serve.js active <a href="https://github.com/HousebirdGames/Birdhouse/commit/e8a4fea" class="commit">(Commit e8a4fea)</a></li>
  <li>Added options for the release of silent and forced updates to the pipeline and service worker registration; Added experimental local development server and automated build process; Updated readme with the new flags and a section about the local development server <a href="https://github.com/HousebirdGames/Birdhouse/commit/ac0d7de" class="commit">(Commit ac0d7de)</a></li>
</ul>
<h2 id="month-2024-04">[button href=^#month-2024-04^ class=^copyLink^]2024-04<span class="material-icons spaceLeft">link</span>[/button]</h2>
<ul class="changelogList">
  <li>Added the addScript function to main.js that can be used to dynamically add a JavaScript file to the document's body <a href="https://github.com/HousebirdGames/Birdhouse/commit/219b04e" class="commit">(Commit 219b04e)</a></li>
  <li>Added option to not overwrite the content when loading a component <a href="https://github.com/HousebirdGames/Birdhouse/commit/41327c8" class="commit">(Commit 41327c8)</a></li>
  <li>All hidden files/folders (starting with .) are now excluded by default from builds/releases; Improved pipeline statistics generation <a href="https://github.com/HousebirdGames/Birdhouse/commit/c61a8ce" class="commit">(Commit c61a8ce)</a></li>
  <li>Updated wording to be more clear about the -local flag <a href="https://github.com/HousebirdGames/Birdhouse/commit/2085a49" class="commit">(Commit 2085a49)</a></li>
  <li>Added -local flag to pipeline that will build the project to the local dist directory instead of directly uploading it; Added distPath setting to the pipeline config; Added dist folder to the Birdhouse .gitignore; Improved cached size calculation to include the size of not-minified files; Polishing of the pipeline, including better error handling and logging; Updated Readme to include the new -local flag <a href="https://github.com/HousebirdGames/Birdhouse/commit/4111961" class="commit">(Commit 4111961)</a></li>
  <li>Improved install button handling <a href="https://github.com/HousebirdGames/Birdhouse/commit/0cca829" class="commit">(Commit 0cca829)</a></li>
  <li>Corrected example hook <a href="https://github.com/HousebirdGames/Birdhouse/commit/f89e55d" class="commit">(Commit f89e55d)</a></li>
  <li>Updated top comment of pipeline.js <a href="https://github.com/HousebirdGames/Birdhouse/commit/02c98c4" class="commit">(Commit 02c98c4)</a></li>
  <li>Updated example everywhere.js to use the updated route creation syntax <a href="https://github.com/HousebirdGames/Birdhouse/commit/8369142" class="commit">(Commit 8369142)</a></li>
  <li>Removed markdown elements from documentation that are no longer needed <a href="https://github.com/HousebirdGames/Birdhouse/commit/3ffd717" class="commit">(Commit 3ffd717)</a></li>
  <li>Added hooks documentation; More hooks are now fully optional (get-loading-content, add-dynamic-routes, add-markdown-patterns); Added fetchData utility function to main.js <a href="https://github.com/HousebirdGames/Birdhouse/commit/3c4b189" class="commit">(Commit 3c4b189)</a></li>
  <li>Added default parameter for resizeAllTextareas to documentation comment <a href="https://github.com/HousebirdGames/Birdhouse/commit/b44755f" class="commit">(Commit b44755f)</a></li>
  <li>Added overwrite-not-authorized-user-page-content hook as well as the overwrite-not-authorized-user-page-content hook; Further improved textarea resizing performance for large amounts of textareas and added a batchSize parameter to resizeAllTextareas <a href="https://github.com/HousebirdGames/Birdhouse/commit/1d8abaa" class="commit">(Commit 1d8abaa)</a></li>
  <li>Image comparison sliders that are added via Birdhouse markdown now also use the upload folder by default <a href="https://github.com/HousebirdGames/Birdhouse/commit/9f5bcbb" class="commit">(Commit 9f5bcbb)</a></li>
  <li>Updated pipeline to include database directory in the uploads (still excluded from the cache) <a href="https://github.com/HousebirdGames/Birdhouse/commit/172357e" class="commit">(Commit 172357e)</a></li>
  <li>Admin and user routes now correctly display the default warning instead of rejecting the promise; Input validation now correctly uses console.warn instead of console.warning; Excluded paths now utilize the urlPrefix; Improved the textarea height calculations and added a new function that calculates the height of the textarea based on the content; PWA install buttons are now avoiding previous race conditions <a href="https://github.com/HousebirdGames/Birdhouse/commit/ab26e2a" class="commit">(Commit ab26e2a)</a></li>
  <li>Changed docs comment <a href="https://github.com/HousebirdGames/Birdhouse/commit/3fe8fa7" class="commit">(Commit 3fe8fa7)</a></li>
  <li>Improved performance by only resizing textareas in the popups themselve, when opening them <a href="https://github.com/HousebirdGames/Birdhouse/commit/c627b60" class="commit">(Commit c627b60)</a></li>
  <li>Improved textarea resizing performance <a href="https://github.com/HousebirdGames/Birdhouse/commit/ad735ae" class="commit">(Commit ad735ae)</a></li>
  <li>Textarea resizing is now called correctly <a href="https://github.com/HousebirdGames/Birdhouse/commit/53ab6f5" class="commit">(Commit 53ab6f5)</a></li>
  <li>Install button is now avoiding a race condition and does no longer prevent the default install prompt; Improved initial textarea resizing; Added a new function to resize a single textarea; Added the resizeTextareaNodes function to efficiently resize selected textarea nodes; Textareas added in infinite scroll will now automatically be resized <a href="https://github.com/HousebirdGames/Birdhouse/commit/7af77a1" class="commit">(Commit 7af77a1)</a></li>
  <li>Input validation now also listens to click events; Input validation now works even without having an validate-field hook; Input validation no longer adds additional error elements when there are missing labels, instead an error is logged; Body scroll blocker class now only gets removed after the popup display property is set to none to help with custom fade-out-fast animations <a href="https://github.com/HousebirdGames/Birdhouse/commit/1df5243" class="commit">(Commit 1df5243)</a></li>
  <li>Added hint to the changelog to the readme; Automatic scroll now awaits one full repaint before being triggered to be more reliable with anchor links <a href="https://github.com/HousebirdGames/Birdhouse/commit/e519d46" class="commit">(Commit e519d46)</a></li>
  <li>Added a paragraph and link about the commit history <a href="https://github.com/HousebirdGames/Birdhouse/commit/22bb12b" class="commit">(Commit 22bb12b)</a></li>
  <li>Updated Documentation to include the return type of the InfiniteScroll function <a href="https://github.com/HousebirdGames/Birdhouse/commit/ebecb05" class="commit">(Commit ebecb05)</a></li>
  <li>Added parameter to infinitite scroll function to force element loading <a href="https://github.com/HousebirdGames/Birdhouse/commit/6c5aab7" class="commit">(Commit 6c5aab7)</a></li>
  <li>Removed console logging from scroll function <a href="https://github.com/HousebirdGames/Birdhouse/commit/79e79a8" class="commit">(Commit 79e79a8)</a></li>
  <li>Infinite scroll object now exposes the handleScroll method; Scroll function is now documented and exported by main.js <a href="https://github.com/HousebirdGames/Birdhouse/commit/596f85c" class="commit">(Commit 596f85c)</a></li>
  <li>Improved anchor scroll behaviour; Removed additional scroll trigger <a href="https://github.com/HousebirdGames/Birdhouse/commit/25bef90" class="commit">(Commit 25bef90)</a></li>
  <li>Base path now is correctly added to the index.html when configured <a href="https://github.com/HousebirdGames/Birdhouse/commit/2b87db5" class="commit">(Commit 2b87db5)</a></li>
  <li>User scrolls now abort automatic scroll <a href="https://github.com/HousebirdGames/Birdhouse/commit/6300569" class="commit">(Commit 6300569)</a></li>
  <li>Updated readme to include new pre- and post-release script functionality and clarify sftp configuration and added a guidelines section and a license section; Configs are now also sorted to be uploaded last in the pipeline; Added guidelines and license <a href="https://github.com/HousebirdGames/Birdhouse/commit/e90f38b" class="commit">(Commit e90f38b)</a></li>
  <li>Removed logging;; Added documentation links to readme <a href="https://github.com/HousebirdGames/Birdhouse/commit/629824c" class="commit">(Commit 629824c)</a></li>
  <li>Added documentation <a href="https://github.com/HousebirdGames/Birdhouse/commit/f5a7155" class="commit">(Commit f5a7155)</a></li>
  <li>Added pre and post release scripts as an config option to the pipeline <a href="https://github.com/HousebirdGames/Birdhouse/commit/5df881d" class="commit">(Commit 5df881d)</a></li>
  <li>Added hooks to overwrite several default content parts; Hooks now return null as default instead of the args given <a href="https://github.com/HousebirdGames/Birdhouse/commit/d7e5d14" class="commit">(Commit d7e5d14)</a></li>
</ul>
<h2 id="month-2024-03">[button href=^#month-2024-03^ class=^copyLink^]2024-03<span class="material-icons spaceLeft">link</span>[/button]</h2>
<ul class="changelogList">
  <li>Added scroll lock; Added documentation <a href="https://github.com/HousebirdGames/Birdhouse/commit/8ff4339" class="commit">(Commit 8ff4339)</a></li>
  <li>Added documentation; Improved anchor scroll behaviour after page load <a href="https://github.com/HousebirdGames/Birdhouse/commit/511db4e" class="commit">(Commit 511db4e)</a></li>
  <li>Updated documentation; readded the add-markdown-patterns hook <a href="https://github.com/HousebirdGames/Birdhouse/commit/f211d39" class="commit">(Commit f211d39)</a></li>
  <li>Added documentation <a href="https://github.com/HousebirdGames/Birdhouse/commit/9da1dab" class="commit">(Commit 9da1dab)</a></li>
  <li>Added documentation <a href="https://github.com/HousebirdGames/Birdhouse/commit/d98a5d9" class="commit">(Commit d98a5d9)</a></li>
  <li>Clicking on pure anchor links will now correctly trigger the scroll; Removed old logging; Added Birdhouse SVG Logo <a href="https://github.com/HousebirdGames/Birdhouse/commit/8e35afc" class="commit">(Commit 8e35afc)</a></li>
  <li>Added function to remove certain css links; Added doumentation comments <a href="https://github.com/HousebirdGames/Birdhouse/commit/ce1c9fc" class="commit">(Commit ce1c9fc)</a></li>
  <li>Added redirect404ToRoot option to the config <a href="https://github.com/HousebirdGames/Birdhouse/commit/c0c6d55" class="commit">(Commit c0c6d55)</a></li>
  <li>Added some documentation comment; Markdown elements now support classes and ids; Refactored route creation; Implemented component css functionality; Improved loadCSS function; Pipeline now handles the base path in the index.html (added corresponding option to pipeline config); Components no longer need their file extension for route creation <a href="https://github.com/HousebirdGames/Birdhouse/commit/11d749f" class="commit">(Commit 11d749f)</a></li>
  <li>Added the option to add action delegate event listeners to specific containers/elements instead of the whole document; Updated the example component <a href="https://github.com/HousebirdGames/Birdhouse/commit/1a34f99" class="commit">(Commit 1a34f99)</a></li>
  <li>Removed scroll console log <a href="https://github.com/HousebirdGames/Birdhouse/commit/1059908" class="commit">(Commit 1059908)</a></li>
  <li>Update note buttons are now initialized after the on-actions-setup; Improved textarea resizing behaviour for large textareas <a href="https://github.com/HousebirdGames/Birdhouse/commit/0e36d8e" class="commit">(Commit 0e36d8e)</a></li>
  <li>Fixed markdown button wrap returning promise synchronously <a href="https://github.com/HousebirdGames/Birdhouse/commit/ae740ac" class="commit">(Commit ae740ac)</a></li>
  <li>Updated example component to new action system <a href="https://github.com/HousebirdGames/Birdhouse/commit/bf5335b" class="commit">(Commit bf5335b)</a></li>
  <li>Resolved issue where not all items where loading with the new infinite scroll behaviour <a href="https://github.com/HousebirdGames/Birdhouse/commit/6984277" class="commit">(Commit 6984277)</a></li>
  <li>Removed debug logging and added version parameter to the loadCSS function <a href="https://github.com/HousebirdGames/Birdhouse/commit/2eea4f6" class="commit">(Commit 2eea4f6)</a></li>
  <li>Resolved issue where the loading symbol would not show at the bottom of the infinite scroll <a href="https://github.com/HousebirdGames/Birdhouse/commit/46c598a" class="commit">(Commit 46c598a)</a></li>
  <li>Implemented optional caching for the infinite scroll module; Improved dynamic route handling <a href="https://github.com/HousebirdGames/Birdhouse/commit/9239b01" class="commit">(Commit 9239b01)</a></li>
  <li>Merge branch 'main' of https://github.com/HousebirdGames/Birdhouse <a href="https://github.com/HousebirdGames/Birdhouse/commit/9f1cc6f" class="commit">(Commit 9f1cc6f)</a></li>
  <li>Infinite scrolling is now correctly awaiting item additions <a href="https://github.com/HousebirdGames/Birdhouse/commit/1e52da8" class="commit">(Commit 1e52da8)</a></li>
  <li>Added submodule recommendation and command to the readme <a href="https://github.com/HousebirdGames/Birdhouse/commit/7233867" class="commit">(Commit 7233867)</a></li>
  <li>Removed console log from link listeners <a href="https://github.com/HousebirdGames/Birdhouse/commit/e9bfaec" class="commit">(Commit e9bfaec)</a></li>
  <li>Query Parameters of link elements will not longer be ignored on clicks <a href="https://github.com/HousebirdGames/Birdhouse/commit/5e2fb3f" class="commit">(Commit 5e2fb3f)</a></li>
  <li>Route changes are now correclty scrolling to the top of the page again <a href="https://github.com/HousebirdGames/Birdhouse/commit/58a4ef0" class="commit">(Commit 58a4ef0)</a></li>
  <li>Pipeline now automatically creates folders that are specified to be cached, but missing as well as the compressedFolder, if it is missing; Image compression now includes a file type check to avoid file unnecessary compression attempts <a href="https://github.com/HousebirdGames/Birdhouse/commit/b46e12e" class="commit">(Commit b46e12e)</a></li>
  <li>Added the option to trigger a route change and added the goToRoute function that allows to switch the current route <a href="https://github.com/HousebirdGames/Birdhouse/commit/4c88c0b" class="commit">(Commit 4c88c0b)</a></li>
</ul>
<h2 id="month-2024-02">[button href=^#month-2024-02^ class=^copyLink^]2024-02<span class="material-icons spaceLeft">link</span>[/button]</h2>
<ul class="changelogList">
  <li>Added before-actions-setup hook which allows a more streamlined global adding/removal of actions before the setup process <a href="https://github.com/HousebirdGames/Birdhouse/commit/7582a05" class="commit">(Commit 7582a05)</a></li>
  <li>Added the option for passive event listeners to the actions system <a href="https://github.com/HousebirdGames/Birdhouse/commit/770b81b" class="commit">(Commit 770b81b)</a></li>
  <li>Added new actions system and "on-actions-setup" hook <a href="https://github.com/HousebirdGames/Birdhouse/commit/823c820" class="commit">(Commit 823c820)</a></li>
  <li>Prevented invalid elements to be regocnized by the link listener <a href="https://github.com/HousebirdGames/Birdhouse/commit/950e998" class="commit">(Commit 950e998)</a></li>
  <li>Updated content default height <a href="https://github.com/HousebirdGames/Birdhouse/commit/a6a2633" class="commit">(Commit a6a2633)</a></li>
  <li>Improved automated footer year display <a href="https://github.com/HousebirdGames/Birdhouse/commit/ca97b0e" class="commit">(Commit ca97b0e)</a></li>
  <li>Added icons folder to defaullt pipeline config <a href="https://github.com/HousebirdGames/Birdhouse/commit/682537d" class="commit">(Commit 682537d)</a></li>
  <li>Added empty folders and updated defaultl pipeline config to improve instant deployability <a href="https://github.com/HousebirdGames/Birdhouse/commit/0fa7283" class="commit">(Commit 0fa7283)</a></li>
  <li>Added the new "-genicons"-flag to the readme <a href="https://github.com/HousebirdGames/Birdhouse/commit/0320b40" class="commit">(Commit 0320b40)</a></li>
  <li>Added options for separate generation of manifest icons to the pipeline <a href="https://github.com/HousebirdGames/Birdhouse/commit/6652559" class="commit">(Commit 6652559)</a></li>
  <li>Added sftp config parameter and error handling to pipeline and improved service worker config import <a href="https://github.com/HousebirdGames/Birdhouse/commit/08117ee" class="commit">(Commit 08117ee)</a></li>
  <li>Corrected sftp config errror logging <a href="https://github.com/HousebirdGames/Birdhouse/commit/ee79e90" class="commit">(Commit ee79e90)</a></li>
  <li>Changed readme logo from .jpg to .png <a href="https://github.com/HousebirdGames/Birdhouse/commit/62d8af6" class="commit">(Commit 62d8af6)</a></li>
  <li>Merge branch 'main' of https://github.com/HousebirdGames/Birdhouse <a href="https://github.com/HousebirdGames/Birdhouse/commit/821f715" class="commit">(Commit 821f715)</a></li>
  <li>Added logo as png + added it to the readme <a href="https://github.com/HousebirdGames/Birdhouse/commit/8db1ceb" class="commit">(Commit 8db1ceb)</a></li>
  <li>Updated to new import statement casing <a href="https://github.com/HousebirdGames/Birdhouse/commit/9923da7" class="commit">(Commit 9923da7)</a></li>
  <li>Fixed typos <a href="https://github.com/HousebirdGames/Birdhouse/commit/37f7af7" class="commit">(Commit 37f7af7)</a></li>
  <li>Added excluded paths option to config; Added compressed upload skip flag to pipeline; changed Birdhouse references to capital 'B' <a href="https://github.com/HousebirdGames/Birdhouse/commit/6bf5647" class="commit">(Commit 6bf5647)</a></li>
  <li>Updated import paths to avoid editor warnings in certain cases <a href="https://github.com/HousebirdGames/Birdhouse/commit/4fcd5f7" class="commit">(Commit 4fcd5f7)</a></li>
  <li>Corrected example index.html <a href="https://github.com/HousebirdGames/Birdhouse/commit/d03b081" class="commit">(Commit d03b081)</a></li>
  <li>Improved page load order for smoother transitions <a href="https://github.com/HousebirdGames/Birdhouse/commit/f424899" class="commit">(Commit f424899)</a></li>
  <li>Removed additional image comparison slider css load <a href="https://github.com/HousebirdGames/Birdhouse/commit/dc2f78f" class="commit">(Commit dc2f78f)</a></li>
  <li>Prevented additional css reload <a href="https://github.com/HousebirdGames/Birdhouse/commit/e63c414" class="commit">(Commit e63c414)</a></li>
  <li>Improved hook performance through callback caching <a href="https://github.com/HousebirdGames/Birdhouse/commit/573626b" class="commit">(Commit 573626b)</a></li>
  <li>Merge branch 'main' of https://github.com/HousebirdGames/Birdhouse <a href="https://github.com/HousebirdGames/Birdhouse/commit/b9c46a7" class="commit">(Commit b9c46a7)</a></li>
  <li>Improved dynamic route pathing <a href="https://github.com/HousebirdGames/Birdhouse/commit/9b1a30b" class="commit">(Commit 9b1a30b)</a></li>
  <li>Update README.md <a href="https://github.com/HousebirdGames/Birdhouse/commit/724d3db" class="commit">(Commit 724d3db)</a></li>
  <li>Removed debugging logs and code <a href="https://github.com/HousebirdGames/Birdhouse/commit/0dfa560" class="commit">(Commit 0dfa560)</a></li>
  <li>Fixed route exclusions <a href="https://github.com/HousebirdGames/Birdhouse/commit/253c355" class="commit">(Commit 253c355)</a></li>
  <li>Improved console log and corrected file path <a href="https://github.com/HousebirdGames/Birdhouse/commit/1863281" class="commit">(Commit 1863281)</a></li>
  <li>Updated comments <a href="https://github.com/HousebirdGames/Birdhouse/commit/90844cf" class="commit">(Commit 90844cf)</a></li>
  <li>Update minifiedDirectory path <a href="https://github.com/HousebirdGames/Birdhouse/commit/76c44d8" class="commit">(Commit 76c44d8)</a></li>
  <li>Improved backup flow <a href="https://github.com/HousebirdGames/Birdhouse/commit/57b0094" class="commit">(Commit 57b0094)</a></li>
  <li>Added improved error when there is nothing to backup <a href="https://github.com/HousebirdGames/Birdhouse/commit/4428e83" class="commit">(Commit 4428e83)</a></li>
  <li>Updated pipeline to work with new files names <a href="https://github.com/HousebirdGames/Birdhouse/commit/a61ee0e" class="commit">(Commit a61ee0e)</a></li>
  <li>Create FUNDING.yml <a href="https://github.com/HousebirdGames/Birdhouse/commit/0f996a8" class="commit">(Commit 0f996a8)</a></li>
  <li>Initial Commit <a href="https://github.com/HousebirdGames/Birdhouse/commit/27e03a5" class="commit">(Commit 27e03a5)</a></li>
</ul>

[h1]default-style.css[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/default-style.css^]view this file on GitHub[/a].[/p][p class=^topComment justify^]Contains the default styles to help you get started with the project quickly. It includes the CSS Normalize, Material Icons as well as some basic styles for the popup component and more. You can always remove it from your index.html, copy parts from it and check it for updates to useful defaults.[/p]
[h1]electron-main.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/electron-main.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This file, electron-main.js, serves as the main entry point for an Electron application. It is still in an experimental phase and should not be used in production. <br><br>Electron is a framework that allows for the development of desktop applications using web technologies like HTML, CSS, and JavaScript. The main process, which is initiated by this file, can create and manage BrowserWindow instances, handle system events, and control the application's lifecycle.[/p]
[h1]LICENSE.txt[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/fonts\LICENSE.txt^]view this file on GitHub[/a].[/p][p class=^justify^]License for the Material Icons font:[/p][p class=^justify^]                                 Apache License                            Version 2.0, January 2004                         http://www.apache.org/licenses/[/p][p class=^justify^]   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION[/p][p class=^justify^]   1. Definitions.[/p][p class=^justify^]      "License" shall mean the terms and conditions for use, reproduction,       and distribution as defined by Sections 1 through 9 of this document.[/p][p class=^justify^]      "Licensor" shall mean the copyright owner or entity authorized by       the copyright owner that is granting the License.[/p][p class=^justify^]      "Legal Entity" shall mean the union of the acting entity and all       other entities that control, are controlled by, or are under common       control with that entity. For the purposes of this definition,       "control" means (i) the power, direct or indirect, to cause the       direction or management of such entity, whether by contract or       otherwise, or (ii) ownership of fifty percent (50%) or more of the       outstanding shares, or (iii) beneficial ownership of such entity.[/p][p class=^justify^]      "You" (or "Your") shall mean an individual or Legal Entity       exercising permissions granted by this License.[/p][p class=^justify^]      "Source" form shall mean the preferred form for making modifications,       including but not limited to software source code, documentation       source, and configuration files.[/p][p class=^justify^]      "Object" form shall mean any form resulting from mechanical       transformation or translation of a Source form, including but       not limited to compiled object code, generated documentation,       and conversions to other media types.[/p][p class=^justify^]      "Work" shall mean the work of authorship, whether in Source or       Object form, made available under the License, as indicated by a       copyright notice that is included in or attached to the work       (an example is provided in the Appendix below).[/p][p class=^justify^]      "Derivative Works" shall mean any work, whether in Source or Object       form, that is based on (or derived from) the Work and for which the       editorial revisions, annotations, elaborations, or other modifications       represent, as a whole, an original work of authorship. For the purposes       of this License, Derivative Works shall not include works that remain       separable from, or merely link (or bind by name) to the interfaces of,       the Work and Derivative Works thereof.[/p][p class=^justify^]      "Contribution" shall mean any work of authorship, including       the original version of the Work and any modifications or additions       to that Work or Derivative Works thereof, that is intentionally       submitted to Licensor for inclusion in the Work by the copyright owner       or by an individual or Legal Entity authorized to submit on behalf of       the copyright owner. For the purposes of this definition, "submitted"       means any form of electronic, verbal, or written communication sent       to the Licensor or its representatives, including but not limited to       communication on electronic mailing lists, source code control systems,       and issue tracking systems that are managed by, or on behalf of, the       Licensor for the purpose of discussing and improving the Work, but       excluding communication that is conspicuously marked or otherwise       designated in writing by the copyright owner as "Not a Contribution."[/p][p class=^justify^]      "Contributor" shall mean Licensor and any individual or Legal Entity       on behalf of whom a Contribution has been received by Licensor and       subsequently incorporated within the Work.[/p][p class=^justify^]   2. Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.[/p][p class=^justify^]   3. Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.[/p][p class=^justify^]   4. Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:[/p][p class=^justify^]      (a) You must give any other recipients of the Work or           Derivative Works a copy of this License; and[/p][p class=^justify^]      (b) You must cause any modified files to carry prominent notices           stating that You changed the files; and[/p][p class=^justify^]      (c) You must retain, in the Source form of any Derivative Works           that You distribute, all copyright, patent, trademark, and           attribution notices from the Source form of the Work,           excluding those notices that do not pertain to any part of           the Derivative Works; and[/p][p class=^justify^]      (d) If the Work includes a "NOTICE" text file as part of its           distribution, then any Derivative Works that You distribute must           include a readable copy of the attribution notices contained           within such NOTICE file, excluding those notices that do not           pertain to any part of the Derivative Works, in at least one           of the following places: within a NOTICE text file distributed           as part of the Derivative Works; within the Source form or           documentation, if provided along with the Derivative Works; or,           within a display generated by the Derivative Works, if and           wherever such third-party notices normally appear. The contents           of the NOTICE file are for informational purposes only and           do not modify the License. You may add Your own attribution           notices within Derivative Works that You distribute, alongside           or as an addendum to the NOTICE text from the Work, provided           that such additional attribution notices cannot be construed           as modifying the License.[/p][p class=^justify^]      You may add Your own copyright statement to Your modifications and       may provide additional or different license terms and conditions       for use, reproduction, or distribution of Your modifications, or       for any such Derivative Works as a whole, provided Your use,       reproduction, and distribution of the Work otherwise complies with       the conditions stated in this License.[/p][p class=^justify^]   5. Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.[/p][p class=^justify^]   6. Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.[/p][p class=^justify^]   7. Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an "AS IS" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.[/p][p class=^justify^]   8. Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.[/p][p class=^justify^]   9. Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.[/p][p class=^justify^]   END OF TERMS AND CONDITIONS[/p][p class=^justify^]   APPENDIX: How to apply the Apache License to your work.[/p][p class=^justify^]      To apply the Apache License to your work, attach the following       boilerplate notice, with the fields enclosed by brackets "[]"       replaced with your own identifying information. (Don't include       the brackets!)  The text should be enclosed in the appropriate       comment syntax for the file format. We also recommend that a       file or class name and description of purpose be included on the       same "printed page" as the copyright notice for easier       identification within third-party archives.[/p][p class=^justify^]   Copyright [yyyy] [name of copyright owner][/p][p class=^justify^]   Licensed under the Apache License, Version 2.0 (the "License");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at[/p][p class=^justify^]       http://www.apache.org/licenses/LICENSE-2.0[/p][p class=^justify^]   Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an "AS IS" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.[/p]
[h1]GUIDELINES.md[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/GUIDELINES.md^]view this file on GitHub[/a].[/p]<h1>Logo and Name Usage Guidelines</h1>
<p>Thank you for using the Birdhouse Framework. We are pleased that you&#39;ve chosen our framework for your projects. To maintain the integrity of the Birdhouse Framework brand and to prevent any confusion or misrepresentation, we&#39;ve established the following guidelines for using the Birdhouse Framework logo and name.</p>
<h3>Permitted Use</h3>
<ul>
<li><strong>Project Attribution:</strong> You may use the Birdhouse Framework logo and name to indicate that your project or product was built using the Birdhouse Framework. For example, in your project documentation or on your website, you may include statements like &quot;Built with Birdhouse&quot; together with the logo. You can also display the Birdhouse Framework logo with a note indicating your project&#39;s use of the framework.</li>
<li><strong>Educational and Instructional Material:</strong> You are welcome to use the logo and name in educational or instructional materials that teach or demonstrate how to use the Birdhouse Framework, such as tutorials, courses, or articles.</li>
</ul>
<h3>Restrictions</h3>
<ul>
<li><strong>No Implication of Affiliation or Endorsement:</strong> The use of the Birdhouse Framework logo and name should not imply any official affiliation with or endorsement by the Birdhouse Framework team unless such a relationship has been formally established. Please avoid using the logo or name in a way that suggests sponsorship, partnership, or any official status without explicit permission.</li>
<li><strong>Inappropriate Use:</strong> You should not use the Birdhouse Framework logo or name in any way that is misleading, defamatory, infringes on intellectual property rights, violates any rights of privacy or publicity, or is otherwise unlawful or in any manner that disparages the Birdhouse Framework or its community.</li>
</ul>
<h3>Visual and Verbal Representation</h3>
<ul>
<li><p><strong>Maintain Original Design:</strong> Do not alter, distort, or reconfigure the logo. It should be used as provided by the Birdhouse Framework, ensuring that its design integrity is preserved.</p>
</li>
<li><p><strong>Color Modification:</strong> You are permitted to modify the color of the logo to better align with your project&#39;s design aesthetic, provided there is sufficient contrast to maintain its visibility and recognizability. This flexibility is intended to facilitate the logo&#39;s integration into a variety of design contexts while respecting the Birdhouse Framework&#39;s brand identity.</p>
</li>
<li><p><strong>Prohibited Uses:</strong> The Birdhouse Framework logo should not be used in any manner that implies endorsement, affiliation, or sponsorship by the Birdhouse Framework unless such a relationship has been officially established. Additionally, the logo must not be used in contexts that could be considered inappropriate, offensive, or in conflict with the values and reputation of the Birdhouse Framework.</p>
</li>
</ul>
<h3>Request for Permission</h3>
<p>If you wish to use the Birdhouse Framework logo or name in any manner not covered by these guidelines, or if you have any doubts about the correct use of the logo and name, please contact us at <a href="mailto:contact@housebird.games">contact@housebird.games</a>. We&#39;re more than happy to discuss your needs and, if possible, grant permission.</p>

<h1>Hooks</h1><p>Here you find all hooks that are available. You can also view the hooks implementation to learn how to add custom hooks: <a href="src/modules/hooks.js">hooks.js</a></p>[div class=^hook^ id=^hook-before-adding-base-content^][h3]Hook: <strong class="copyData" data-copy="window.hook('before-adding-base-content', async function (menuHTML) {/* This hook will get triggered when the base content is about to be added.  <br>  <br> This is usually the place to i.e. add the menu to the header element. */});">before-adding-base-content</strong> [button href=^#hook-before-adding-base-content^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook will get triggered when the base content is about to be added.  <br>  <br> This is usually the place to i.e. add the menu to the header element.[/p][p class=^annotation^]These are the parameters the hooks function will receive: <strong>menuHTML</strong>[/p][p class=^annotation^]When using this hook, its function should return: <strong>Nothing</strong>[/p][/div][div class=^hook^ id=^hook-on-handle-route-change^][h3]Hook: <strong class="copyData" data-copy="window.hook('on-handle-route-change', async function () {/* This hook will get triggered as soon as a route change is started. */});">on-handle-route-change</strong> [button href=^#hook-on-handle-route-change^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook will get triggered as soon as a route change is started.[/p][p class=^annotation^]When using this hook, its function should return: <strong>Nothing</strong>[/p][/div][div class=^hook^ id=^hook-on-component-loaded^][h3]Hook: <strong class="copyData" data-copy="window.hook('on-component-loaded', async function () {/* This hook will get triggered, when a component is successfully loaded. */});">on-component-loaded</strong> [button href=^#hook-on-component-loaded^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook will get triggered, when a component is successfully loaded.[/p][p class=^annotation^]When using this hook, its function should return: <strong>Nothing</strong>[/p][/div][div class=^hook^ id=^hook-on-content-loaded^][h3]Hook: <strong class="copyData" data-copy="window.hook('on-content-loaded', async function () {/* This hook will get triggered, when the content is displayed (i.e. of a component). */});">on-content-loaded</strong> [button href=^#hook-on-content-loaded^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook will get triggered, when the content is displayed (i.e. of a component).[/p][p class=^annotation^]When using this hook, its function should return: <strong>Nothing</strong>[/p][/div][div class=^hook^ id=^hook-before-actions-setup^][h3]Hook: <strong class="copyData" data-copy="window.hook('before-actions-setup', async function () {/* This hook will get triggered, before the actions are invoked and set up. You can use this hook to remove actions or add new ones globally. */});">before-actions-setup</strong> [button href=^#hook-before-actions-setup^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook will get triggered, before the actions are invoked and set up. You can use this hook to remove actions or add new ones globally.[/p][p class=^annotation^]When using this hook, its function should return: <strong>Nothing</strong>[/p][/div][div class=^hook^ id=^hook-on-actions-setup^][h3]Hook: <strong class="copyData" data-copy="window.hook('on-actions-setup', async function () {/* This hook will get triggered, when the actions are invoked and set up. */});">on-actions-setup</strong> [button href=^#hook-on-actions-setup^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook will get triggered, when the actions are invoked and set up.[/p][p class=^annotation^]When using this hook, its function should return: <strong>Nothing</strong>[/p][/div][div class=^hook^ id=^hook-get-popup-menu-html^][h3]Hook: <strong class="copyData" data-copy="window.hook('get-popup-menu-html', async function (menuHTML) {/* Use this hook to set the HTML content of the popup menu. */});">get-popup-menu-html</strong> [button href=^#hook-get-popup-menu-html^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]Use this hook to set the HTML content of the popup menu.[/p][p class=^annotation^]These are the parameters the hooks function will receive: <strong>menuHTML</strong>[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string or nothing</strong>[/p][/div][div class=^hook^ id=^hook-page-loaded^][h3]Hook: <strong class="copyData" data-copy="window.hook('page-loaded', async function () {/* This hook will get triggered, when the page is loaded. */});">page-loaded</strong> [button href=^#hook-page-loaded^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook will get triggered, when the page is loaded.[/p][p class=^annotation^]When using this hook, its function should return: <strong>Nothing</strong>[/p][/div][div class=^hook^ id=^hook-user-logged-in^][h3]Hook: <strong class="copyData" data-copy="window.hook('user-logged-in', async function () {/* This hook will get triggered, when the user is logged in */});">user-logged-in</strong> [button href=^#hook-user-logged-in^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook will get triggered, when the user is logged in[/p][p class=^annotation^]When using this hook, its function should return: <strong>Nothing</strong>[/p][/div][div class=^hook^ id=^hook-overwrite-default-base-content^][h3]Hook: <strong class="copyData" data-copy="window.hook('overwrite-default-base-content', async function () {/* This hook will get triggered when the default base content is about to be added. You can use this hook to overwrite the default base content by returning HTML as a string.  <br>  <br> This will prevent the get-storage-acknowledgement-popup-content hook from being triggered. */});">overwrite-default-base-content</strong> [button href=^#hook-overwrite-default-base-content^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook will get triggered when the default base content is about to be added. You can use this hook to overwrite the default base content by returning HTML as a string.  <br>  <br> This will prevent the get-storage-acknowledgement-popup-content hook from being triggered.[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string or nothing</strong>[/p][/div][div class=^hook^ id=^hook-overwrite-not-authorized-user-page-content^][h3]Hook: <strong class="copyData" data-copy="window.hook('overwrite-not-authorized-user-page-content', async function () {/* With this hook you can overwrite the default not authorized user page content.  <br>  <br> This content will be loaded like a component instead of the actual component, if the user is not logged in as a user. */});">overwrite-not-authorized-user-page-content</strong> [button href=^#hook-overwrite-not-authorized-user-page-content^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]With this hook you can overwrite the default not authorized user page content.  <br>  <br> This content will be loaded like a component instead of the actual component, if the user is not logged in as a user.[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string or nothing</strong>[/p][/div][div class=^hook^ id=^hook-overwrite-not-authorized-admin-page-content^][h3]Hook: <strong class="copyData" data-copy="window.hook('overwrite-not-authorized-admin-page-content', async function () {/* With this hook you can overwrite the default not authorized admin page content.  <br>  <br> This content will be loaded like a component instead of the actual component, if the user is not logged in as an admin. */});">overwrite-not-authorized-admin-page-content</strong> [button href=^#hook-overwrite-not-authorized-admin-page-content^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]With this hook you can overwrite the default not authorized admin page content.  <br>  <br> This content will be loaded like a component instead of the actual component, if the user is not logged in as an admin.[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string or nothing</strong>[/p][/div][div class=^hook^ id=^hook-overwrite-404-content^][h3]Hook: <strong class="copyData" data-copy="window.hook('overwrite-404-content', async function () {/* With this hook you can overwrite the default 404 component content. */});">overwrite-404-content</strong> [button href=^#hook-overwrite-404-content^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]With this hook you can overwrite the default 404 component content.[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string or nothing</strong>[/p][/div][div class=^hook^ id=^hook-overwrite-oups-content^][h3]Hook: <strong class="copyData" data-copy="window.hook('overwrite-oups-content', async function () {/* With this hook you can overwrite the default component content that is shown when something goes wrong when loading a component. */});">overwrite-oups-content</strong> [button href=^#hook-overwrite-oups-content^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]With this hook you can overwrite the default component content that is shown when something goes wrong when loading a component.[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string or nothing</strong>[/p][/div][div class=^hook^ id=^hook-overwrite-failed-to-load-content^][h3]Hook: <strong class="copyData" data-copy="window.hook('overwrite-failed-to-load-content', async function () {/* With this hook you can overwrite the default component content that is shown when a component can&#039;t be retrieved (i.e. when offline and not cached). */});">overwrite-failed-to-load-content</strong> [button href=^#hook-overwrite-failed-to-load-content^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]With this hook you can overwrite the default component content that is shown when a component can&#039;t be retrieved (i.e. when offline and not cached).[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string or nothing</strong>[/p][/div][div class=^hook^ id=^hook-add-markdown-patterns^][h3]Hook: <strong class="copyData" data-copy="window.hook('add-markdown-patterns', async function (html) {/* This hook lets you add additional markdown patterns to the markdown parser.  <br>  <br> Please refer to the example everywhere.js file for more information. */});">add-markdown-patterns</strong> [button href=^#hook-add-markdown-patterns^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook lets you add additional markdown patterns to the markdown parser.  <br>  <br> Please refer to the example everywhere.js file for more information.[/p][p class=^annotation^]These are the parameters the hooks function will receive: <strong>html</strong>[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string or nothing</strong>[/p][/div][div class=^hook^ id=^hook-create-routes^][h3]Hook: <strong class="copyData" data-copy="window.hook('create-routes', async function () {/* This hook is utilized to dynamically create and manage routing within the application. It allows for the definition of routes based on user roles and other conditions, enabling a flexible navigation structure.  <br>  <br> For more detailed information on how to create the routes, please look at the documentation for the following functions: createPublicRoute, createUserRoute and createAdminRoute */});">create-routes</strong> [button href=^#hook-create-routes^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is utilized to dynamically create and manage routing within the application. It allows for the definition of routes based on user roles and other conditions, enabling a flexible navigation structure.  <br>  <br> For more detailed information on how to create the routes, please look at the documentation for the following functions: createPublicRoute, createUserRoute and createAdminRoute[/p][p class=^annotation^]When using this hook, its function should return: <strong>Nothing</strong>[/p][/div][div class=^hook^ id=^hook-get-cookies-list^][h3]Hook: <strong class="copyData" data-copy="window.hook('get-cookies-list', async function () {/* This hook will be used to get a list of cookies that i.e. should be deleted when the user revoked the storage acknowledgement. */});">get-cookies-list</strong> [button href=^#hook-get-cookies-list^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook will be used to get a list of cookies that i.e. should be deleted when the user revoked the storage acknowledgement.[/p][p class=^annotation^]When using this hook, its function should return: <strong>Array of cookie names (strings)</strong>[/p][/div][div class=^hook^ id=^hook-get-allowed-paths-during-maintenance^][h3]Hook: <strong class="copyData" data-copy="window.hook('get-allowed-paths-during-maintenance', async function () {/* This hook is used to determine which paths are still allowed to visit during maintenance mode. */});">get-allowed-paths-during-maintenance</strong> [button href=^#hook-get-allowed-paths-during-maintenance^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to determine which paths are still allowed to visit during maintenance mode.[/p][p class=^annotation^]When using this hook, its function should return: <strong>Array of relative paths (strings)</strong>[/p][/div][div class=^hook^ id=^hook-get-spa-excluded-links^][h3]Hook: <strong class="copyData" data-copy="window.hook('get-spa-excluded-links', async function () {/* This hook is used to determine which paths are excluded from the single page application route handling. */});">get-spa-excluded-links</strong> [button href=^#hook-get-spa-excluded-links^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to determine which paths are excluded from the single page application route handling.[/p][p class=^annotation^]When using this hook, its function should return: <strong>Array of relative paths (strings)</strong>[/p][/div][div class=^hook^ id=^hook-get-storage-acknowledgement-popup-content^][h3]Hook: <strong class="copyData" data-copy="window.hook('get-storage-acknowledgement-popup-content', async function () {/* This hook is used to overwrite the content of the storage acknowledgement popup. */});">get-storage-acknowledgement-popup-content</strong> [button href=^#hook-get-storage-acknowledgement-popup-content^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to overwrite the content of the storage acknowledgement popup.[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string or nothing</strong>[/p][/div][div class=^hook^ id=^hook-generate-menu-html^][h3]Hook: <strong class="copyData" data-copy="window.hook('generate-menu-html', async function (menuItems) {/* This hook generates the menu HTML based on the menu items that are created with createPublicRoute, createUserRoute and createAdminRoute.  <br>  <br> To learn more about menuItems are generated, view the getMenuItems function in main.js. */});">generate-menu-html</strong> [button href=^#hook-generate-menu-html^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook generates the menu HTML based on the menu items that are created with createPublicRoute, createUserRoute and createAdminRoute.  <br>  <br> To learn more about menuItems are generated, view the getMenuItems function in main.js.[/p][p class=^annotation^]These are the parameters the hooks function will receive: <strong>menuItems</strong>[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string</strong>[/p][/div][div class=^hook^ id=^hook-fetch-user-data^][h3]Hook: <strong class="copyData" data-copy="window.hook('fetch-user-data', async function () {/* This hook is used to let you implement custom logic for the user login system.  <br>  <br> Here you should fetch the user data from your backend and return it as a JSON response. Please refer to the example everywhere.js for more information. */});">fetch-user-data</strong> [button href=^#hook-fetch-user-data^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to let you implement custom logic for the user login system.  <br>  <br> Here you should fetch the user data from your backend and return it as a JSON response. Please refer to the example everywhere.js for more information.[/p][p class=^annotation^]When using this hook, its function should return: <strong>JSON response</strong>[/p][/div][div class=^hook^ id=^hook-check-remember-me^][h3]Hook: <strong class="copyData" data-copy="window.hook('check-remember-me', async function () {/* If your backend confirms that the user is remembered (i.e. Token accepted), return true. Returning true here, will then reload the page. */});">check-remember-me</strong> [button href=^#hook-check-remember-me^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]If your backend confirms that the user is remembered (i.e. Token accepted), return true. Returning true here, will then reload the page.[/p][p class=^annotation^]When using this hook, its function should return: <strong>Boolean or nothing (returning nothing will equal false)</strong>[/p][/div][div class=^hook^ id=^hook-get-maintenance-mode^][h3]Hook: <strong class="copyData" data-copy="window.hook('get-maintenance-mode', async function () {/* This hook is used to let you fetch the current state of the maintenance mode. */});">get-maintenance-mode</strong> [button href=^#hook-get-maintenance-mode^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to let you fetch the current state of the maintenance mode.[/p][p class=^annotation^]When using this hook, its function should return: <strong>Boolean or nothing</strong>[/p][/div][div class=^hook^ id=^hook-add-dynamic-routes^][h3]Hook: <strong class="copyData" data-copy="window.hook('add-dynamic-routes', async function (path) {/* Here you can add some dynamic routes based on the path. For example, you could add a route for each user, based on the user&#039;s ID. Or maybe you want to create blog posts that are fetched from a database.  <br>  <br> These routes are only created when the user visits the path. So you can add a lot of dynamic routes without slowing down the initial page load. This also means, that they can not be added to the menu automatically. */});">add-dynamic-routes</strong> [button href=^#hook-add-dynamic-routes^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]Here you can add some dynamic routes based on the path. For example, you could add a route for each user, based on the user&#039;s ID. Or maybe you want to create blog posts that are fetched from a database.  <br>  <br> These routes are only created when the user visits the path. So you can add a lot of dynamic routes without slowing down the initial page load. This also means, that they can not be added to the menu automatically.[/p][p class=^annotation^]These are the parameters the hooks function will receive: <strong>path</strong>[/p][p class=^annotation^]When using this hook, its function should return: <strong>Boolean that should be true if you have added a dynamic route for the path</strong>[/p][/div][div class=^hook^ id=^hook-database-get-setting^][h3]Hook: <strong class="copyData" data-copy="window.hook('database-get-setting', async function (name, cacheSetting) {/* This hook is used to fetch a setting from your backend.  <br>  <br> Cache setting will be either &#039;default&#039; or &#039;no-store&#039; and can be used in the fetch request. */});">database-get-setting</strong> [button href=^#hook-database-get-setting^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to fetch a setting from your backend.  <br>  <br> Cache setting will be either &#039;default&#039; or &#039;no-store&#039; and can be used in the fetch request.[/p][p class=^annotation^]These are the parameters the hooks function will receive: <strong>name, cacheSetting</strong>[/p][p class=^annotation^]When using this hook, its function should return: <strong>JSON response</strong>[/p][/div][div class=^hook^ id=^hook-database-set-setting^][h3]Hook: <strong class="copyData" data-copy="window.hook('database-set-setting', async function (name, value) {/* This hook is used to set a setting from at your backend. */});">database-set-setting</strong> [button href=^#hook-database-set-setting^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to set a setting from at your backend.[/p][p class=^annotation^]These are the parameters the hooks function will receive: <strong>name, value</strong>[/p][p class=^annotation^]When using this hook, its function should return: <strong>JSON response</strong>[/p][/div][div class=^hook^ id=^hook-send-analytics^][h3]Hook: <strong class="copyData" data-copy="window.hook('send-analytics', async function (value) {/* This hook is used to send data to your analytics backend. */});">send-analytics</strong> [button href=^#hook-send-analytics^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to send data to your analytics backend.[/p][p class=^annotation^]These are the parameters the hooks function will receive: <strong>value</strong>[/p][p class=^annotation^]When using this hook, its function should return: <strong>Nothing</strong>[/p][/div][div class=^hook^ id=^hook-validate-field^][h3]Hook: <strong class="copyData" data-copy="window.hook('validate-field', async function (input, value, errorElement, serverSide) {/* This hook is used to set a setting from at your backend.  <br>  <br> The serverSide boolean can be used to determine if the validation should be done on the server side. */});">validate-field</strong> [button href=^#hook-validate-field^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to set a setting from at your backend.  <br>  <br> The serverSide boolean can be used to determine if the validation should be done on the server side.[/p][p class=^annotation^]These are the parameters the hooks function will receive: <strong>input, value, errorElement, serverSide</strong>[/p][p class=^annotation^]When using this hook, its function should return: <strong>Boolean where false means, that the input is not valid; true (or returning nothing) means, that the input is valid</strong>[/p][/div][div class=^hook^ id=^hook-get-loading-content^][h3]Hook: <strong class="copyData" data-copy="window.hook('get-loading-content', async function () {/* This hook is used to set the content that is displayed while the current component is loading.  <br>  <br> If you return false, the page content will not be cleared while the component is loading. */});">get-loading-content</strong> [button href=^#hook-get-loading-content^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to set the content that is displayed while the current component is loading.  <br>  <br> If you return false, the page content will not be cleared while the component is loading.[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string or false</strong>[/p][/div][div class=^hook^ id=^hook-get-component-loading-content^][h3]Hook: <strong class="copyData" data-copy="window.hook('get-component-loading-content', function (identifier) {/* This hook is used to set the content that is displayed in the placeholder for a component that is loading using the asyncLoad function.  <br>  <br> Important: This hook is not async, so you can&#039;t use await in this function. This is because the placeholder needs to be displayed immediately.  <br>  <br> If you return false or nothing, &quot;Loading...&quot; will be displayed in the placeholder. */});">get-component-loading-content</strong> [button href=^#hook-get-component-loading-content^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to set the content that is displayed in the placeholder for a component that is loading using the asyncLoad function.  <br>  <br> Important: This hook is not async, so you can&#039;t use await in this function. This is because the placeholder needs to be displayed immediately.  <br>  <br> If you return false or nothing, &quot;Loading...&quot; will be displayed in the placeholder.[/p][p class=^annotation^]These are the parameters the hooks function will receive: <strong>identifier</strong>[/p][p class=^annotation^]When using this hook, its function should return: <strong>HTML as a string or false</strong>[/p][/div][div class=^hook^ id=^hook-opened-popup^][h3]Hook: <strong class="copyData" data-copy="window.hook('opened-popup', async function (popupID) {/* This hook is used to add custom logic that is triggered after a popup is opened through the openPopup function of the popupManager.  <br>  <br> This hook receives the ID of the popup that was opened as a parameter that can be used to identify the popup. */});">opened-popup</strong> [button href=^#hook-opened-popup^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]This hook is used to add custom logic that is triggered after a popup is opened through the openPopup function of the popupManager.  <br>  <br> This hook receives the ID of the popup that was opened as a parameter that can be used to identify the popup.[/p][p class=^annotation^]These are the parameters the hooks function will receive: <strong>popupID</strong>[/p][p class=^annotation^]When using this hook, its function should return: <strong>Nothing</strong>[/p][/div]
[h1]LICENSE.txt[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/LICENSE.txt^]view this file on GitHub[/a].[/p][p class=^justify^]Copyright (c) 2024 Felix T. Vogel[/p][p class=^justify^]Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:[/p][p class=^justify^]The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.[/p][p class=^justify^]THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.[/p]
[h1]package.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/package.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This feature is in an experimental state and may not be suitable for all use cases. Please use with caution and report any issues you encounter. <br><br>This Node.js script, provides the Electron packaging functionality for Birdhouse.[/p]
[h1]pipeline.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/pipeline.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This script automates the release process of a progressive web application via sftp. <br><br>To use this script: <br><br>1. Install the necessary dependencies by running [i]npm install[/i] in the terminal. <br><br>2. Run the script with [i]node pipeline.js -init[/i]. This will initialize the project by copying the necessary files and creating the config files. <br><br>3. Run the script with [i]node pipeline.js -h[/i]. This will display the help message. <br><br>4. If you want to release to production, add the [i]-production[/i] or [i]-p[/i] flag. <br><br>Please ensure that you have the necessary permissions to read from and write to the specified directories and files, and to connect to the SFTP server.[/p]
[h1]README.md[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/README.md^]view this file on GitHub[/a].[/p]<p align="center">
  <img src="https://birdhouse-js.com/img/icons/Icon-3000x3000.png" width="200">
</p>

<h1><strong>The Birdhouse Framework</strong></h1>
<h2>Introduction</h2>
<p><strong>Birdhouse</strong> is a Vanilla JavaScript framework for Single Page Applications and supports easy Progressive Web App rollouts through its NodeJS Pipeline. Birdhouse is primarily designed for deployment to Apache Webserver Webspaces via SFTP. However, with necessary modifications, it can also be adapted for use in other environments. Everything is provided as is.</p>
<p>The Framework is a lightweight way to have a web app that mainly utilizes the resources of the users device. You can always integrate a backend, that allows for more functionality, but this framework is aimed at providing full offline capabilities to the enduser.</p>
<h2>Documentation</h2>
<p>Access comprehensive Birdhouse documentation at <a href="https://birdhouse-js.com">birdhouse-js.com</a>.</p>
<p>For private, local access to the documentation, leverage the <a href="https://github.com/HousebirdGames/Birdhouse-Website">official Birdhouse Doumentation Website GitHub repository</a>. Simply clone the repository and deploy it locally, for example, with XAMPP or using the local development server (instructions below).</p>
<p>Keep up with the latest updates by viewing <a href="https://github.com/HousebirdGames/Birdhouse/commits/main/">the commit history on GitHub</a> or <a href="https://birdhouse-js.com/changelog">the changelog on the documentation website</a>.</p>
<h2>Logo and Name Use Guidelines Notice</h2>
<p>When using the Birdhouse Framework in your projects, please adhere to our <a href="https://github.com/HousebirdGames/Birdhouse/blob/main/GUIDELINES.md">Logo and Name Use Guidelines</a> to ensure respectful and correct usage of our brand assets.</p>
<h2>License</h2>
<p>The Birdhouse Framework is open source software licensed under the <a href="https://opensource.org/licenses/MIT">MIT license</a>. This license grants you the permission to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, subject to the following conditions:</p>
<ul>
<li><strong>Acknowledgment:</strong> While not required, we appreciate acknowledgment or attribution when the Birdhouse Framework is used in a project. This can be in the form of a link back to our <a href="https://github.com/HousebirdGames/Birdhouse">GitHub repository</a> or our official website, <a href="https://birdhouse-js.com">birdhouse-js.com</a>.</li>
<li><strong>Logo and Name Use:</strong> The use of the Birdhouse Framework logo and name is governed by our Logo and Name Use Guidelines, which are designed to ensure the respectful and correct usage of our brand assets. Please refer to these guidelines for more details on how to use the Birdhouse Framework logo and name in your projects.</li>
</ul>
<p>This license does not require you to make your own project open source if you use the Birdhouse Framework.</p>
<h2>Quick Start</h2>
<p>Follow these steps to get the project up and running on your local machine:</p>
<ol>
<li><p>Clone the repository from GitHub. <strong>The Birdhouse repo has to be in the <code>Birdhouse</code>-subdirectory of your project.</strong> If you have <a href="https://git-scm.com/downloads">Git</a> installed on your machine, you can do this by navigating to your project directory and executing the following command:</p>
<pre><code class="language-bash">git clone https://github.com/HousebirdGames/Birdhouse.git
</code></pre>
<p> <strong>OR</strong></p>
<p> If your project is already using Git, it&#39;s recommended to add <strong>Birdhouse</strong> as a submodule (this can also be done later). To do this, use the following command:</p>
<pre><code class="language-bash">git submodule add https://github.com/HousebirdGames/Birdhouse ./Birdhouse
</code></pre>
</li>
<li><p>Change your current directory to the one that was created when you cloned the repository:</p>
<pre><code class="language-bash">cd Birdhouse
</code></pre>
</li>
<li><p>Install the project pipeline dependencies and initialize the project:</p>
<pre><code class="language-bash">npm run start
</code></pre>
</li>
</ol>
<p><strong>Note:</strong> If you ever change the name of you project directory, remember to update the localhost <code>.htaccess</code> file to reflect the new directory name.</p>
<p>At this point, you&#39;re ready to configure your project. You&#39;ll find the configuration files your root directory:</p>
<ul>
<li><code>config.js</code>: This file contains the main configuration for the project.</li>
<li><code>pipeline-config.js</code>: This file contains the configuration for the deployment pipeline.</li>
</ul>
<p>Open these files in your text editor and adjust the settings to match your project&#39;s requirements.</p>
<p>Once you&#39;ve finished configuring the project, you can run it on your local machine. If you&#39;re using <a href="https://www.apachefriends.org/index.html">XAMPP</a>, start the XAMPP control panel, ensure Apache is running, and then navigate to the project in your web browser.</p>
<p><strong>Important:</strong> Do not change the service-worker.js. It will get recopied to root on deployment and on root updates.</p>
<h2>Local Development Server <strong>(experimental)</strong></h2>
<p>The Birdhouse Framework includes a script, <code>server.js</code>, designed to simplify local development by serving your application directly from your development environment. This script is integral to simulating an Apache server environment, ensuring that your application behaves consistently between development and production. While <code>server.js</code> can function independently for basic tasks, it is primarily meant to be used alongside the <code>serve.js</code> script, which handles automatic file watching, building, and server restarting.</p>
<p>To use <code>serve.js</code>, ensure you are in the <code>Birdhouse</code> directory, then execute these commands:</p>
<p>If you have not already, cd in to Birdhouse.</p>
<pre><code class="language-bash">cd Birdhouse
</code></pre>
<p>Then make sure all node modules are installed.</p>
<pre><code class="language-bash">npm install
</code></pre>
<p>Now you can serve the app locally.</p>
<pre><code class="language-bash">node serve
</code></pre>
<p>or</p>
<pre><code class="language-bash">npm run serve
</code></pre>
<p>You can also specify a port like this (default: 4200):</p>
<pre><code class="language-bash">node serve 3000
</code></pre>
<p> This starts the local server and begins serving your project from the <code>dist</code> directory, automatically applying any Apache-like .htaccess rules you have configured for HTTP headers. The terminal will provide the URL with the default or specified port.</p>
<p>This setup not only mimics the production environment closely but also allows you to test changes instantly without manual refreshes, although you should manually reload your browser to see updates.</p>
<p><strong>Important:</strong> Remember, <code>serve.js</code> and <code>server.js</code> are for local development purposes only and should not be used as a production server.</p>
<h2>Project Structure</h2>
<p>To utilize the pipeline, ensure you&#39;re in the Birdhouse directory by executing:</p>
<pre><code class="language-bash">cd Birdhouse
</code></pre>
<p>Avoid making changes to the files in the Birdhouse directory, as future updates to the Birdhouse repository may overwrite them. To generate or update the configuration files (except <code>sftp-config.js</code>) in your root folder, execute the following command:</p>
<pre><code class="language-NODE">node pipeline -u
</code></pre>
<p>To generate or update the necessary root files (including <code>sftp-config.js.EXAMPLE</code>), use this command:</p>
<pre><code class="language-NODE">node pipeline -r
</code></pre>
<p>To learn more about the available command line options, keep reading the sections below.</p>
<p><strong>Important:</strong> Keep all changes you make inside the <code>custom</code> folder, so that you can always update the framework or just put your <code>custom</code> folder in a new one.</p>
<h2>The Pipeline</h2>
<h3>Key Features of <code>pipeline.js</code>:</h3>
<ul>
<li>Incremental versioning control.</li>
<li>Directory and file cache management.</li>
<li>SFTP upload functionality.</li>
<li>Support for multiple deployment paths (production/staging).</li>
<li>Clean and user-friendly console interface with progress indicators and colored output.</li>
<li>Command line flexibility for different deployment scenarios.</li>
</ul>
<p>Ensure to keep the <code>pipeline-config.js</code> updated with any changes in project structure or deployment requirements.</p>
<h2>Release Process</h2>
<p><strong>Note:</strong> You should configure the <code>manifest.json</code>, <code>sitemap.xml</code> and <code>robots.txt</code> to fit your project.</p>
<p>The <code>pipeline.js</code> script streamlines the release process. It will automatically compress any images from <code>uncompressedDir</code> to the <code>compressedDir</code>.</p>
<h3>Setting Up the Pipeline</h3>
<p>To get started with deploying your Birdhouse project, you&#39;ll need to configure the deployment pipeline. This involves setting up configuration files for the pipeline itself and for secure file transfer (SFTP). Follow these steps to ensure everything is set up correctly:</p>
<ol>
<li><p><strong>Configure the Pipeline:</strong></p>
<p>Edit the <code>pipeline-config.js</code> file located in your Birdhouse directory. This file contains settings specific to your project, such as deployment targets and versioning. Fill in the necessary details according to your project&#39;s requirements.</p>
</li>
<li><p><strong>Set Up SFTP:</strong></p>
<p>Next, adjust the <code>sftp-config.js</code> file to match your server&#39;s SFTP connection details. This configuration enables the pipeline to upload your project files to the server.</p>
</li>
<li><p><strong>Configuration:</strong></p>
<p>For additional security and to make the SFTP configuration reusable for other Birdhouse projects, move the <code>sftp-config.js</code> file to the parent directory of your Birdhouse project. This separation ensures that sensitive information, like server credentials, is not stored within the project directory, reducing the risk of accidental exposure.</p>
</li>
</ol>
<p>Make sure your are in the Birdhouse directory:</p>
<pre><code class="language-bash">cd Birdhouse
</code></pre>
<ol>
<li>Run <code>npm install</code> to install dependencies, if you haven&#39;t already.</li>
<li>Execute the script <code>node pipeline.js</code>. This begins the release process.</li>
<li>Use the <code>-c</code> option to update the cache file list and the <code>-m</code> option to minify .js and .css files before uploading them.</li>
<li>Use <code>-p</code> to upload the web app via SFTP to production.</li>
<li>To specify a new version, use <code>-v</code> or <code>-version</code> followed by the number or without a number for an incremental version change.</li>
</ol>
<p><strong>Example:</strong></p>
<pre><code class="language-NODE">pipeline.js -p -c -m -v 1.2.3.4
</code></pre>
<p><strong>Important:</strong> Some files (like <code>service-worker.js</code>) are placed within <code>Birdhouse/root</code> and will be copied to the root of the project. This will be done automatically on deployment, but can also be triggered with the <code>-root</code>-flag.</p>
<h3>Utilizing Pre- and Post-Release Scripts</h3>
<p>For advanced deployment scenarios, your Birdhouse project might require the execution of additional Node.js scripts either before or after the deployment process. This feature is especially useful for tasks such as database migrations, environment setup, or cleanup operations that need to run in conjunction with your deployment workflow.</p>
<p>To integrate these tasks into your deployment process, you can specify them in the <code>pipeline-config.js</code> file within the Birdhouse directory. Add the relative paths to your scripts to the <code>preReleaseScripts</code> array for scripts that need to run before deployment, and to the <code>postReleaseScripts</code> array for scripts that should run after deployment. This configuration ensures that your scripts are executed automatically at the appropriate time during the deployment to either production or staging environments.</p>
<h4>Example Configuration</h4>
<pre><code class="language-javascript">// In pipeline-config.js
module.exports = {
  // Other configurations...
  preReleaseScripts: [
    &#39;scripts/pre-deploy-script.js&#39;
  ],
  postReleaseScripts: [
    &#39;scripts/post-deploy-script.js&#39;
  ]
};
</code></pre>
<p>This setup automatically calls <code>pre-deploy-script.js</code> (located in the scripts folder of your projects root directory) before initiating the deployment process and <code>post-deploy-script.js</code> after the deployment completes successfully. Make sure your scripts are idempotent (i.e., they can run multiple times without causing issues) and have proper error handling to avoid disrupting the deployment process.</p>
<h3>Command Line Options:</h3>
<ul>
<li><code>-help</code>, <code>-h</code> or no flag: Display help message and exit. <strong>(STRONGLY RECOMMENDED to get more detailed and up to date information)</strong></li>
<li><code>-update</code> or <code>-u</code>: Updates or creates the config.js and config-pipeline.js with necessary entries, orders them and exits.</li>
<li><code>-root</code> or <code>-r</code>: Copies all files from /Birdhouse/root to the root directory and exits.</li>
<li><code>-production</code> or <code>-p</code>: Release to the production environment.</li>
<li><code>-staging</code> or <code>-s</code>: Release to the staging environment.</li>
<li><code>-local</code> or <code>-l</code>: Builds the project to the local dist directory and thereby skips the upload to the server (so -p and -s are ignored).</li>
<li><code>-forced &lt;-p|-s|-l&gt;</code>: Forces the update (triggers a page reload after the new version is cached on the user&#39;s device), without notifying the user.</li>
<li><code>-silent &lt;-p|-s|-l&gt;</code>: Performs a silent update which does not display the update notification and becomes active after the next page reload.</li>
<li><code>-version</code> or <code>-v</code>: Update the version of the <code>service-worker.js</code>.</li>
<li><code>-cache</code> or <code>-c</code>: (Re-)Generate the <code>filesToCache.js</code> file.</li>
<li><code>-minify</code> or <code>-m</code>: Minifies the files in filesToCache.js (before uploading them to the server; if not set, the original files will be uploaded).</li>
<li><code>-delete</code> or <code>-d</code>: Delete the application directory (production, staging or local) from the server.</li>
<li><code>-backup</code> or <code>-b</code>: Creates a backup before deploying the new version that can be rolled back to.</li>
<li><code>-rollback</code> or <code>-r</code>: Rollback to the backup version of either staging (<code>-s</code>) or production (<code>-p</code>), when available on the server.</li>
<li><code>-info</code> or <code>-i</code>: Display detailed information about the process.</li>
<li><code>-skipCompU</code> or <code>-su</code>: Skips image compression and upload of the compressed folder, which is faster in some scenarios, where repeated uploads of the folder are not neccessary.</li>
<li><code>-genFavicons</code> or <code>-gf</code>: Creates favicons of all specified (or the default) sizes from the original favicon and exits after that.</li>
<li><code>-genIcons</code> or <code>-gi</code>: Creates icons of all specified (or the default) sizes from the original icon and exits after that.</li>
<li><code>-genAppIcons</code> or <code>-ga</code>: Creates .icon (paths are configured in the pipeline-config.js) and exits after that.</li>
<li><code>-noLog</code> or <code>-nl</code>: No statistics will be logged and added to the log file.</li>
</ul>
<p>The script automates various tasks, including version number updates, cache list generation, and file uploads to the server. Ensure you have the necessary permissions for file operations and SFTP server access.</p>

[h1]service-worker.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/root\service-worker.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]The service worker is a fundamental component for enabling a progressive web app to operate offline. By caching essential files listed in the filesToCache.js script — automatically generated during the project's build process — it ensures that these files are available from the cache when no network connection is available. <br><br>During deployment, the build pipeline automatically relocates the service worker to the root directory of the project. It also generates a config-sw.js file based on your project's config.js file. This configuration specifies the cache version and outlines which paths should be excluded from caching. The cache version, dictated by config.js, is pivotal for cache management and is refreshed anytime there's a version update via the pipeline. <br><br>When handling requests to the database (indicated by URLs starting with "database/..."), the service worker attempts to fetch the data from the network first. If the network request fails, it looks for the data in the cache. Failing to find the data in the cache too, it returns a status code of 503, signaling service unavailability. This approach ensures data availability, even in offline scenarios, enhancing the user experience by leveraging modern web capabilities.[/p]
[h1]admin-style.css[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/root_EXAMPLE\admin-style.css^]view this file on GitHub[/a].[/p][p class=^topComment justify^]If you have implemented admin logins, this style will be loaded for the admin users.[/p]
[h1]everywhere.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/root_EXAMPLE\everywhere.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This file is loaded on every page and can be used to add custom JavaScript code that should be executed everywhere, like routing, hooks, and more. <br><br>By default it comes with many examples and explanations to help you get started. You can remove them or comment them out to clean up the file. <br><br>Remember to keep this file up to date with the latest version of the example everywhere.js file as more hooks might become available or necessary in the future.[/p]
[h1]index.html[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/root_EXAMPLE\index.html^]view this file on GitHub[/a].[/p][p class=^topComment justify^]The provided index.html file serves as the starting point for your project, positioned in the root directory upon initialization. <br><br>It's designed to be fully customizable to fit your project's needs. This file lays down a solid groundwork by incorporating essential resources such as main.js, service-worker-registration.js, manifest.json and default-style.css, alongside various icons. Additionally, it includes foundational elements such as the update notification popup and the content div, ensuring a comprehensive setup for further development. <br><br>Feel free to adjust and expand upon this template as your project evolves.[/p]
[h1]robots.txt[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/root_EXAMPLE\robots.txt^]view this file on GitHub[/a].[/p][p class=^justify^]# This robots.txt serves as a template for managing how search engines interact with your site. Tailor its directives to align with the specific requirements and objectives of your project, guiding search engine bots in a way that optimizes your site's visibility and indexing strategy.[/p][p class=^justify^]User-agent: *[/p][p class=^justify^]Disallow: /uploads/[/p][p class=^justify^]Sitemap: https://YOUR_DOMAIN.EXAMPLE/sitemap.xml[/p]
[h1]example-inputs.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/root_EXAMPLE\src\components\example-inputs.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This is an example of how to create a component that demonstrates the usage of various input types.[/p][h2 id=^functions^][button href=^#functions^ class=^copyLink^]Functions<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^function^ id=^function-ExampleInputs^][h3]DEFAULT async export <strong class="copyData" data-copy="ExampleInputs()">ExampleInputs</strong> [button href=^#function-ExampleInputs^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Demonstrates the creation and usage of various input types within a Birdhouse component. This includes text, email inputs, and a textarea with validation constraints. It also showcases updating page metadata specific to the input example. <br> [/p]<table><tr></tr><tr><th class="returns">Returns</th><td>string</td><td>The HTML content for the input example component.</td></tr></table>[/div]
[h1]example.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/root_EXAMPLE\src\components\example.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This is an example of a custom component that can be used within the Birdhouse framework.[/p][h2 id=^functions^][button href=^#functions^ class=^copyLink^]Functions<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^function^ id=^function-Example^][h3]DEFAULT async export <strong class="copyData" data-copy="Example(Object)">Example</strong>(Object: exampleData) [button href=^#function-Example^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Demonstrates various uses of the action system within Birdhouse to interact with UI elements. It showcases updating page metadata, handling query parameters, and adding event listeners with both global and scoped delegation. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">exampleData</td><td>Object</td><td>Data to be used within the component, demonstrating dynamic content.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>string</td><td>The HTML content of the example component.</td></tr></table>[/div]
[h1]maintenance.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/root_EXAMPLE\src\components\maintenance.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This component is displayed when the website is undergoing maintenance. It provides a simple message to inform users that the website is currently unavailable and prompts them to return later. This is a static component, returning only HTML content.[/p][h2 id=^functions^][button href=^#functions^ class=^copyLink^]Functions<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^function^ id=^function-Maintenance^][h3]DEFAULT async export <strong class="copyData" data-copy="Maintenance()">Maintenance</strong> [button href=^#function-Maintenance^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Renders the maintenance message for the website. <br> This function returns a simple HTML structure that displays a maintenance notice to the users, indicating that the website is temporarily unavailable due to maintenance activities. <br> [/p]<table><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;string&gt;</td><td>A promise that resolves with the HTML content of the maintenance component.</td></tr></table>[/div]
[h1]style.css[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/root_EXAMPLE\style.css^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This is the example css file. It will be deployed to the root directory of the project on initialization.[/p]
[h1]updateNotes.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/root_EXAMPLE\updateNotes.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This is an example file for the update notes. It is used to demonstrate the structure of the update notes data. <br><br>Update notes are used to inform users about the changes in the application with each version update and will be displayed in the application in a popup when a new version is activated. You can disable this feature by setting the `showNewUpdateNotes` property to false in the `config.js` file.[/p]
[h1]serve.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/serve.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This feature is in an experimental state and may not be suitable for all use cases. Please use with caution and report any issues you encounter. <br><br>This Node.js script automates the local development process by watching for file changes, running the build pipeline, and restarting a local server. It is designed solely for local development, not for production use, and simulates an Apache server environment to maintain consistency between development and production setups. <br><br>The script uses Chokidar to monitor changes in the project root, excluding its own directory, and manages a local server process that is restarted whenever the build completes successfully. <br><br>Please note that you will still need to manually reload your browser to see the changes. To use the script, cd into the 'Birdhouse' directory and then use `node server` or `npm run serve`. <br><br>To specify the port the server should run on, you can pass it as an argument, e.g., `node serve 3000` or `npm run serve 3000`. <br><br>You can utilize all standard pipeline flags such as -c, -v, -m, -forced, -silent, and -nl to customize the automatic build process. By default, the build is configured with -c -v -m -l -forced -nl. The -l flag is always included to ensure the build is local, overriding any -production (-p) or -staging (-s) flags.[/p]
[h1]server.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/server.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This feature is in an experimental state and may not be suitable for all use cases. Please use with caution and report any issues you encounter. <br><br>This Node.js script, server.js, serves as a local development server by hosting static files and dynamically applying HTTP headers based on a .htaccess-like configuration. It is designed to simulate an Apache server environment, ensuring consistency between development and production setups. <br><br>The script uses the Express framework to serve content from the 'dist' directory and handle fallbacks to 'index.html' for SPA (Single Page Application) routing. It dynamically loads and applies HTTP headers from an .htaccess file located in the 'dist' directory to mirror Apache's .htaccess behavior. <br><br>While it can operate independently for basic serving needs, it is intended to be used in conjunction with a watcher script, such as serve.js, which handles file watching, build pipeline execution, and server restarts. <br><br>To specify the port the server should run on, you can pass it as an argument, e.g., `node server 3000`. <br><br>Please note, this script does not replace a full Apache server and is intended for local development use only, not for production use.[/p]
[h1]service-worker-registration.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/service-worker-registration.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This script handles the registration of the service worker for the application. It is imported in the default index.html file. <br><br>It ensures that new updates to the service worker are detected and prompts the user to update the application. Upon detecting an update, a popup is displayed, giving the user the option to update the app immediately. <br><br>This script is a crucial part of enabling offline capabilities and ensuring that users have access to the latest version of the application.[/p]
[h1]main.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/src\main.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This file contains the core variables and functions for the Birdhouse framework. It also has several useful common functions.[/p][h2 id=^variables^][button href=^#variables^ class=^copyLink^]Variables<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^variable^ id=^variable-defaultClickEvent^][h3]export <strong class="copyData" data-copy="defaultClickEvent">defaultClickEvent</strong> (const string) [button href=^#variable-defaultClickEvent^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]The default event to use for click events. Defaults to click, but can be set to &quot;mousedown&quot; in the config file with the useMouseDown property. <br> <br>[/p][/div][div class=^variable^ id=^variable-standalone^][h3]export <strong class="copyData" data-copy="standalone">standalone</strong> (const boolean) [button href=^#variable-standalone^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]Signals if the app is running in standalone mode through Electron. <br> <br>[/p][/div][div class=^variable^ id=^variable-popupManager^][h3]export <strong class="copyData" data-copy="popupManager">popupManager</strong> (let PopupManager|null) [button href=^#variable-popupManager^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]A reference to the popup manager instance used throughout the application. <br> <br> This variable is initially set to null and should be assigned to an instance of the popup manager once initialized. It is exported to allow for consistent popup management across different parts of the application.[/p][/div][div class=^variable^ id=^variable-urlPrefix^][h3]export <strong class="copyData" data-copy="urlPrefix">urlPrefix</strong> (const string) [button href=^#variable-urlPrefix^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]The prefix for URLs within the application, dynamically set based on the current window location. <br> <br> If the application is being served from the path specified in config.localhostPath (typically during development), urlPrefix is set to this path to correctly handle routing. In production, or if not served from config.localhostPath, it defaults to an empty string. This ensures that URL routing works correctly in both development and production environments.[/p][/div][div class=^variable^ id=^variable-dynamicRoute^][h3]export <strong class="copyData" data-copy="dynamicRoute">dynamicRoute</strong> (let boolean) [button href=^#variable-dynamicRoute^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]Indicates whether the current route is dynamically generated. <br> <br> Set to false by default; it should be updated dynamically based on the application&#039;s routing logic to reflect whether the current page was loaded from a dynamic route.[/p][/div][div class=^variable^ id=^variable-excludedPaths^][h3]export <strong class="copyData" data-copy="excludedPaths">excludedPaths</strong> (const string[]) [button href=^#variable-excludedPaths^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]A list of paths that are excluded from certain application logic, such as redirection. <br> <br> Paths are converted to lowercase to ensure case-insensitive matching. Modify this list as needed for your application in the config file.[/p][/div][div class=^variable^ id=^variable-userData^][h3]export <strong class="copyData" data-copy="userData">userData</strong> (let Object|null) [button href=^#variable-userData^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]If user login is implemented, this variable can store the user data retrieved from the server.[/p][/div][div class=^variable^ id=^variable-isAdminPromise^][h3]export <strong class="copyData" data-copy="isAdminPromise">isAdminPromise</strong> (const Promise&lt;boolean&gt;) [button href=^#variable-isAdminPromise^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]A promise that resolves to a boolean indicating whether the current user is an administrator. Please refer to the fetch-user-data hook for more information as the user data is used here. <br> User data should include userData.loggedIn and userData.isAdmin properties.[/p][/div][div class=^variable^ id=^variable-isUserPromise^][h3]export <strong class="copyData" data-copy="isUserPromise">isUserPromise</strong> (const Promise&lt;boolean&gt;) [button href=^#variable-isUserPromise^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]A promise that resolves to a boolean indicating whether the current user is a logged in. Please refer to the fetch-user-data hook for more information as the user data is used here. <br> User data should include userData.loggedIn and userData.isUser properties.[/p][/div][div class=^variable^ id=^variable-isMaintenanceMode^][h3]export <strong class="copyData" data-copy="isMaintenanceMode">isMaintenanceMode</strong> (let boolean) [button href=^#variable-isMaintenanceMode^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]Signals whether the application is in maintenance mode. If `maintenanceModeWithFailedBackend` is set to `true` in the config file, the application will enter maintenance mode if the backend fails to respond. Otherwise, maintenance mode is only set by the server. <br> <br> The `get-maintenance-mode` hook is used to fetch the maintenance mode status from the server, which is triggeren on route change.[/p][/div][div class=^variable^ id=^variable-cookieIdentifier^][h3]export <strong class="copyData" data-copy="cookieIdentifier">cookieIdentifier</strong> (const string) [button href=^#variable-cookieIdentifier^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]The identifier used to store cookies. This identifier is appended to the cookie name to ensure uniqueness.[/p][/div][h2 id=^functions^][button href=^#functions^ class=^copyLink^]Functions<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^function^ id=^function-debounce^][h3]export <strong class="copyData" data-copy="debounce(Function, number)">debounce</strong>(Function: func, number: wait) [button href=^#function-debounce^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Creates a debounced function that delays invoking `func` until after `wait` milliseconds have elapsed since the last time the debounced function was invoked. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">func</td><td>Function</td><td>The function to debounce.</td></tr><tr><td class="parameter">wait</td><td>number</td><td>The number of milliseconds to delay.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Function</td><td>Returns the new debounced function.</td></tr></table>[/div][div class=^function^ id=^function-action^][h3]export <strong class="copyData" data-copy="action(Function|Object)">action</strong>(Function|Object: action) [button href=^#function-action^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Registers an action to be executed. Actions can either be functions to be executed directly, or objects defining more complex behavior such as event listening. <br> <br> If an action object is provided, it can specify a debounce period, an event type, a selector to delegate events, the container where the delegate listener is added to, and a handler function. <br> <br> If type is not specified, it defaults to the default click event (mousedown or click, depending on the config). <br> <br> Examples: <br> {selector: &#039;button.buttonClass&#039;, handler: ()=&gt;{console.log(&#039;You clicked on a button.&#039;);} } <br> {type: &#039;click&#039;, selector: &#039;button.buttonClass&#039;, handler: ()=&gt;{console.log(&#039;You clicked on a button in the body.&#039;);}, container: &#039;body&#039; } <br> {type: &#039;mouseover&#039;, container: &#039;header&#039;, handler: ()=&gt;{console.log(&#039;Mouse is over header.&#039;);} } <br> {type: &#039;scroll&#039;, handler: ()=&gt;{console.log(&#039;Scroll event on the document.&#039;);} } <br> {type: &#039;click&#039;, selector: &#039;div&#039;, handler: (e) =&gt; console.log(&#039;Clicked a div in the main container.&#039;), container: &#039;main&#039;} <br> <br> If the action is a function, it is simply added to the action queue to be executed after the components are loaded. <br> <br> For examples of how to use the action system, you can also see the example component (Birdhouse/root_EXAMPLE/src/components/example.js). <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">action</td><td>Function|Object</td><td>- The action to register. If an object, it should contain at least `type` and `handler` properties.</td></tr></table>[/div][div class=^function^ id=^function-setupActions^][h3]export <strong class="copyData" data-copy="setupActions()">setupActions</strong> [button href=^#function-setupActions^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Iterates through all registered actions and sets them up accordingly. This function is called automatically after the `before-actions-setup` hook. <br> <br> For function actions, it executes them immediately. For object actions, it adds event listeners to the specified containers. If a container is specified, the event listener is added to all elements matching the container selector. Otherwise, it defaults to the document. [/p][/div][div class=^function^ id=^function-unmountActions^][h3]export <strong class="copyData" data-copy="unmountActions()">unmountActions</strong> [button href=^#function-unmountActions^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Cleans up and removes all event listeners registered through the action system. It is called automatically when a route change is handled. <br> <br> This function iterates through all registered actions, removing event listeners from their specified containers or from the document if no container is specified. After all event listeners are removed, the action list is cleared. [/p][/div][div class=^function^ id=^function-sanitizeIdentifier^][h3]export <strong class="copyData" data-copy="sanitizeIdentifier(string)">sanitizeIdentifier</strong>(string: identifier) [button href=^#function-sanitizeIdentifier^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Sanitizes the input string by replacing all occurrences of spaces, commas, semicolons, and equals signs with underscores. This transformation makes the identifier more suitable for contexts where such characters are prohibited or undesired,  such as in URL slugs or programming variable names. <br> <br> The function targets the following characters for replacement: <br> - Spaces (including tabs and other whitespace characters) <br> - Commas (,) <br> - Semicolons (;) <br> - Equals signs (=) <br> <br> Each of these characters is replaced with an underscore (_) to ensure the sanitized string complies with common usage requirements where these specific characters may be problematic. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">identifier</td><td>string</td><td>The original string to be sanitized.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>string</td><td>The sanitized string, with the specified characters replaced by underscores.</td></tr></table>[/div][div class=^function^ id=^function-createRoute^][h3]async export <strong class="copyData" data-copy="createRoute(Object, string, string, string, string, string, boolean, Object|null, boolean, boolean)">createRoute</strong>(Object: route, string: route.type, string: route.slug, string: route.name, string: route.componentPath, string: [route.materialIcon=&#039;&#039;], boolean: [route.inMenu=true], Object|null: [route.data=null], boolean: [route.displayFull=true], boolean: [route.dynamic=false]) [button href=^#function-createRoute^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Creates a route for the application based on the provided data object. This function supports creating admin, user, and public routes. It dynamically determines the route type and calls the appropriate function to handle the creation. <br> <br> Example usage to create a public route: <br> const publicRoute = { <br>   slug: &#039;/home&#039;,   name: &#039;Home&#039;,   materialIcon: &#039;home&#039;,   componentPath: &#039;components/Home&#039;,   inMenu: true,   data: { key: &#039;value&#039; },   displayFull: true,   dynamic: false,   type: &#039;public&#039; <br> }; <br> await createRoute(publicRoute); <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">route</td><td>Object</td><td>An object containing the route details.</td></tr><tr><td class="parameter">route.type</td><td>string</td><td>The type of the route (&#039;admin&#039;, &#039;user&#039;, or &#039;public&#039;).</td></tr><tr><td class="parameter">route.slug</td><td>string</td><td>The URL slug for the route.</td></tr><tr><td class="parameter">route.name</td><td>string</td><td>The display name for the route.</td></tr><tr><td class="parameter">route.componentPath</td><td>string</td><td>The path to the component that should be loaded for this route.</td></tr><tr><td class="parameter">[route.materialIcon=&#039;&#039;]</td><td>string</td><td>The Material icon identifier for the route.</td></tr><tr><td class="parameter">[route.inMenu=true]</td><td>boolean</td><td>Whether this route should be included in the navigation menu.</td></tr><tr><td class="parameter">[route.data=null]</td><td>Object|null</td><td>Optional data to pass to the route&#039;s component.</td></tr><tr><td class="parameter">[route.displayFull=true]</td><td>boolean</td><td>Whether to display the route with text in navigation contexts.</td></tr><tr><td class="parameter">[route.dynamic=false]</td><td>boolean</td><td>Whether the route is dynamically generated.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;void&gt;</td><td>A promise that resolves when the route has been created.</td></tr></table>[/div][div class=^function^ id=^function-createAdminRoute^][h3]async export <strong class="copyData" data-copy="createAdminRoute(string, string, string, string, boolean, Object|null, boolean, boolean)">createAdminRoute</strong>(string: slug, string: name, string: materialIcon, string: componentPath, boolean: inMenu, Object|null: data, boolean: displayFull, boolean: dynamic) [button href=^#function-createAdminRoute^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Creates an admin route for the application. This function is essential for dynamically adding admin interfaces and ensuring that they are visible only to users with the appropriate permissions. <br> <br> If the user is not logged in as admin, the page content is replaced with default content that prompts the user to log in. This behavior can be customized by using the `overwrite-not-authorized-admin-page-content` hook. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">slug</td><td>string</td><td>The URL slug for the route.</td></tr><tr><td class="parameter">name</td><td>string</td><td>The display name for the route.</td></tr><tr><td class="parameter">materialIcon</td><td>string</td><td>The Material icon identifier for the route.</td></tr><tr><td class="parameter">componentPath</td><td>string</td><td>The path to the component that should be loaded for this route.</td></tr><tr><td class="parameter">inMenu</td><td>boolean</td><td>Whether this route should be included in the navigation menu.</td></tr><tr><td class="parameter">data</td><td>Object|null</td><td>Optional data to pass to the route&#039;s component.</td></tr><tr><td class="parameter">displayFull</td><td>boolean</td><td>Whether to display the route with text in navigation contexts.</td></tr><tr><td class="parameter">dynamic</td><td>boolean</td><td>Whether the route is dynamically generated.</td></tr></table>[/div][div class=^function^ id=^function-createUserRoute^][h3]async export <strong class="copyData" data-copy="createUserRoute(string, string, string, string, boolean, Object|null, boolean, boolean)">createUserRoute</strong>(string: slug, string: name, string: materialIcon, string: componentPath, boolean: inMenu, Object|null: data, boolean: displayFull, boolean: dynamic) [button href=^#function-createUserRoute^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Creates a user route, visible to logged-in users. This function enables the dynamic addition of user-specific pages. <br> <br> If the user is not logged in, the page content is replaced with default content that prompts the user to log in. This behavior can be customized by using the `overwrite-not-authorized-user-page-content` hook. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">slug</td><td>string</td><td>The URL slug for the route.</td></tr><tr><td class="parameter">name</td><td>string</td><td>The display name for the route.</td></tr><tr><td class="parameter">materialIcon</td><td>string</td><td>The Material icon identifier for the route.</td></tr><tr><td class="parameter">componentPath</td><td>string</td><td>The path to the component that should be loaded for this route.</td></tr><tr><td class="parameter">inMenu</td><td>boolean</td><td>Whether this route should be included in the navigation menu.</td></tr><tr><td class="parameter">data</td><td>Object|null</td><td>Optional data to pass to the route&#039;s component.</td></tr><tr><td class="parameter">displayFull</td><td>boolean</td><td>Whether to display the route with text in navigation contexts.</td></tr><tr><td class="parameter">dynamic</td><td>boolean</td><td>Whether the route is dynamically generated.</td></tr></table>[/div][div class=^function^ id=^function-createPublicRoute^][h3]export <strong class="copyData" data-copy="createPublicRoute(string, string, string, string, boolean, Object|null, boolean, boolean)">createPublicRoute</strong>(string: slug, string: name, string: materialIcon, string: componentPath, boolean: inMenu, Object|null: data, boolean: displayFull, boolean: dynamic) [button href=^#function-createPublicRoute^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Creates a public route accessible to all visitors. This function facilitates the addition of general-access pages. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">slug</td><td>string</td><td>The URL slug for the route.</td></tr><tr><td class="parameter">name</td><td>string</td><td>The display name for the route.</td></tr><tr><td class="parameter">materialIcon</td><td>string</td><td>The Material icon identifier for the route.</td></tr><tr><td class="parameter">componentPath</td><td>string</td><td>The path to the component that should be loaded for this route.</td></tr><tr><td class="parameter">inMenu</td><td>boolean</td><td>Whether this route should be included in the navigation menu.</td></tr><tr><td class="parameter">data</td><td>Object|null</td><td>Optional data to pass to the route&#039;s component.</td></tr><tr><td class="parameter">displayFull</td><td>boolean</td><td>Whether to display the route with text in navigation contexts.</td></tr><tr><td class="parameter">dynamic</td><td>boolean</td><td>Whether the route is dynamically generated.</td></tr></table>[/div][div class=^function^ id=^function-generateUniqueId^][h3]export <strong class="copyData" data-copy="generateUniqueId()">generateUniqueId</strong> [button href=^#function-generateUniqueId^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Generates a unique identifier string. <br> <br> This function combines a timestamp, a random string, and an incrementing counter to create a unique identifier. This approach ensures uniqueness even if multiple IDs are generated in the same millisecond. <br> [/p]<table><tr></tr><tr><th class="returns">Returns</th><td>string</td><td>A unique identifier string.</td></tr></table>[/div][div class=^function^ id=^function-asyncLoad^][h3]export <strong class="copyData" data-copy="asyncLoad(Function|Promise, string)">asyncLoad</strong>(Function|Promise: componentOrPromise, string: identifier=null) [button href=^#function-asyncLoad^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Asynchronously loads a component and returns a placeholder. <br> <br> This function creates a placeholder for an asynchronously loaded component, then loads the component and replaces the placeholder with the loaded content. <br> <br> Usage example: <br> import ExampleComponent from &quot;../your-components/example-component.js&quot;; const placeholder = asyncLoad(ExampleComponent(parameter)), &#039;component-identifier&#039;); htmlString += placeholder; <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">componentOrPromise</td><td>Function|Promise</td><td>A function that returns a Promise, or a Promise that resolves to the component&#039;s HTML.</td></tr><tr><td class="parameter">identifier=null</td><td>string</td><td>An optional identifier for the component that will be passed to the get-component-loading-content hook.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>string</td><td>Returns the placeholder HTML string that will be replaced by the component.</td></tr></table>[/div][div class=^function^ id=^function-fetchData^][h3]async export <strong class="copyData" data-copy="fetchData(string, string)">fetchData</strong>(string: url, string: cacheSetting=&#039;default&#039;) [button href=^#function-fetchData^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Fetches data from a specified URL using a GET request. <br> <br> Throws an error if the network response was not ok or if the fetch operation fails. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">url</td><td>string</td><td>The URL to fetch data from.</td></tr><tr><td class="parameter">cacheSetting=&#039;default&#039;</td><td>string</td><td>The cache mode to use for the request (default, no-store, reload, no-cache, force-cache, or only-if-cached).</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;Object&gt;</td><td>A promise that resolves to the JSON response.</td></tr></table>[/div][div class=^function^ id=^function-checkRememberMe^][h3]async export <strong class="copyData" data-copy="checkRememberMe()">checkRememberMe</strong> [button href=^#function-checkRememberMe^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Triggers the check-remember-me hook to determine if there is a valid remember-me token stored. If the hook returns true, the page is reloaded to log in the user automatically. <br> <br> This function is called automatically when the application is loaded. It is used to reload the page if that is needed for the login to take effect. [/p][/div][div class=^function^ id=^function-getMenuItems^][h3]export <strong class="copyData" data-copy="getMenuItems(string)">getMenuItems</strong>(string: routeType) [button href=^#function-getMenuItems^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Retrieves an array of menu items based on the specified route type. Each menu item includes details such as path, display preference, material icon, presence of a name, and the name itself. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">routeType</td><td>string</td><td>The type of route to filter menu items by.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Object[]</td><td>An array of objects representing each menu item&#039;s details.</td></tr></table>[/div][div class=^function^ id=^function-handleRouteChange^][h3]async export <strong class="copyData" data-copy="handleRouteChange()">handleRouteChange</strong> [button href=^#function-handleRouteChange^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Handles route changes within the application. This function is responsible for updating the application&#039;s state based on the new route, including updating the UI, fetching new data, and managing history. It ensures that only one route change is handled at a time to prevent race conditions. <br> <br> This function is called automatically when the application is loaded and when the user navigates, but it can also be triggered manually if needed. [/p][/div][div class=^function^ id=^function-scroll^][h3]export <strong class="copyData" data-copy="scroll()">scroll</strong> [button href=^#function-scroll^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Scrolls to the element specified by the hash in the URL, or to the top of the page if no hash is provided. <br> <br> This function checks the current URL for a hash (#). If a hash is present, it attempts to find an element with an ID that matches the hash. If such an element is found, the page scrolls smoothly to bring the element into view. The `anchorScrollOffset` is used to adjust the final scroll position, allowing for fixed elements like headers. <br> <br> It also will try to restore the scroll position if the hash is empty or no element with a matching ID is found. The scroll position is stored in a map with the current path as the key. If the map exceeds 20 entries (default), the oldest entry is removed. You can adjust the limit by setting the `scrollPositionRecallLimit` property in the config file. Setting it to 0 will disable scroll position recall. <br> <br> If no hash is present in the URL, or if no element with a matching ID is found, the page scrolls to the top. [/p][/div][div class=^function^ id=^function-normalizePath^][h3]export <strong class="copyData" data-copy="normalizePath(string)">normalizePath</strong>(string: path) [button href=^#function-normalizePath^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Normalizes the given path by converting it to lowercase and removing trailing slashes. It also ensures the path is redirected to a specified excluded path if matched. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">path</td><td>string</td><td>The path to normalize.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>string</td><td>The normalized path.</td></tr></table>[/div][div class=^function^ id=^function-getRelativePath^][h3]export <strong class="copyData" data-copy="getRelativePath(string)">getRelativePath</strong>(string: path) [button href=^#function-getRelativePath^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Converts a relative path to a fully qualified URL path, taking into account the application&#039;s URL prefix. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">path</td><td>string</td><td>The path to convert.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>string</td><td>The relative URL path.</td></tr></table>[/div][div class=^function^ id=^function-addAdditionalComponent^][h3]async export <strong class="copyData" data-copy="addAdditionalComponent(string, Object|null)">addAdditionalComponent</strong>(string: componentPath, Object|null: data) [button href=^#function-addAdditionalComponent^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Dynamically adds an additional component to the page&#039;s content area. Useful for loading components based on user interaction or other dynamic criteria. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">componentPath</td><td>string</td><td>The path to the component&#039;s JavaScript module.</td></tr><tr><td class="parameter">data</td><td>Object|null</td><td>Optional data to pass to the component for rendering.</td></tr></table>[/div][div class=^function^ id=^function-addBaseContent^][h3]export <strong class="copyData" data-copy="addBaseContent(string)">addBaseContent</strong>(string: htmlContent) [button href=^#function-addBaseContent^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Appends the provided HTML content to the base content area of the page. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">htmlContent</td><td>string</td><td>The HTML content to add.</td></tr></table>[/div][div class=^function^ id=^function-redirectUserToDashboard^][h3]async export <strong class="copyData" data-copy="redirectUserToDashboard()">redirectUserToDashboard</strong> [button href=^#function-redirectUserToDashboard^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Redirects the user to the dashboard route if they are logged in as a user. This function checks the user&#039;s authentication status and performs the redirection if applicable. [/p][/div][div class=^function^ id=^function-goToRoute^][h3]export <strong class="copyData" data-copy="goToRoute(string)">goToRoute</strong>(string: href) [button href=^#function-goToRoute^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Redirects the browser to a new route. This function updates the browser&#039;s history and triggers the application&#039;s route handling mechanism. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">href</td><td>string</td><td>The path to redirect to.</td></tr></table>[/div][div class=^function^ id=^function-getMenuHTML^][h3]async export <strong class="copyData" data-copy="getMenuHTML()">getMenuHTML</strong> [button href=^#function-getMenuHTML^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Generates the HTML content for the application&#039;s menu based on the current user&#039;s role. This function dynamically constructs the menu items and layout. <br> [/p]<table><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;string&gt;</td><td>A promise that resolves to the generated HTML content for the menu.</td></tr></table>[/div][div class=^function^ id=^function-resizeAllTextareas^][h3]async export <strong class="copyData" data-copy="resizeAllTextareas(number|null)">resizeAllTextareas</strong>(number|null: batchSize=null) [button href=^#function-resizeAllTextareas^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] A utility function to dynamically resize all textareas on the page. It is typically called when the page loads or when the content of the page changes to ensure all textareas are appropriately sized. <br> <br> Is typically called automatically, but can also be triggered manually if needed. <br> <br> This function supports batching which can help in improving performance on pages with a large number of textareas by spreading out the resize operations over multiple animation frames with a delay of 100ms between each batch. This can help prevent the browser from becoming unresponsive when resizing. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">batchSize=null</td><td>number|null</td><td>The number of textareas to process in each batch (needs to be greater than 0). If null, all textareas are resized in a single batch.</td></tr></table>[/div][div class=^function^ id=^function-resizeTextarea^][h3]async export <strong class="copyData" data-copy="resizeTextarea(HTMLTextAreaElement)">resizeTextarea</strong>(HTMLTextAreaElement: textarea) [button href=^#function-resizeTextarea^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] A utility function to dynamically resize a single textarea element. It first resets the textarea&#039;s height to &#039;auto&#039;, then sets it to the scrollHeight of the textarea plus 4 pixels. The scrollHeight is equal to the height of the  textarea&#039;s content. The extra 4 pixels account for the textarea&#039;s border. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">textarea</td><td>HTMLTextAreaElement</td><td>The textarea element to resize.</td></tr></table>[/div][div class=^function^ id=^function-resizeTextareaNodes^][h3]export <strong class="copyData" data-copy="resizeTextareaNodes(NodeList)">resizeTextareaNodes</strong>(NodeList: nodeList) [button href=^#function-resizeTextareaNodes^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] This function works by converting the provided NodeList of textarea elements into an array to leverage array methods for iteration. It processes each textarea in batches to minimize reflows and repaints, improving performance especially when dealing with a large number of textareas. <br> <br> Each textarea&#039;s height is retrieved by using the getTextareaHeight function. <br> <br> Example usage: const textareas = document.querySelectorAll(&#039;textarea&#039;); resizeTextareaNodes(textareas); <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">nodeList</td><td>NodeList</td><td>A NodeList of textarea elements to be resized. Typically obtained through document.querySelectorAll or similar methods.</td></tr></table>[/div][div class=^function^ id=^function-getTextareaHeight^][h3]export <strong class="copyData" data-copy="getTextareaHeight(HTMLTextAreaElement)">getTextareaHeight</strong>(HTMLTextAreaElement: textarea) [button href=^#function-getTextareaHeight^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Calculates the content height of a textarea element without altering its visible state or layout. This function creates an off-screen clone of the provided textarea, applies relevant styles, and measures its scrollHeight to determine the content height. This method avoids causing reflows for the original textarea element, improving performance in scenarios where reflow cost is a concern. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">textarea</td><td>HTMLTextAreaElement</td><td>The textarea element for which to calculate content height.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>number</td><td>The calculated height of the textarea content, in pixels.</td></tr></table>[/div][div class=^function^ id=^function-isInViewport^][h3]export <strong class="copyData" data-copy="isInViewport(Element, number)">isInViewport</strong>(Element: element, number: offset) [button href=^#function-isInViewport^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Checks if the specified element is within the viewport. This can be used to determine if an element is visible to the user. <br> actually enters the viewport. [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">element</td><td>Element</td><td>The DOM element to check.</td></tr><tr><td class="parameter">offset</td><td>number</td><td>An optional offset to consider the element in viewport before it</td></tr><tr></tr><tr><th class="returns">Returns</th><td>boolean</td><td>True if the element is in the viewport, false otherwise.</td></tr></table>[/div][div class=^function^ id=^function-CopyToClipboard^][h3]window.<strong class="copyData" data-copy="window.CopyToClipboard(string, boolean)">CopyToClipboard</strong>(string: stringToCopy, boolean: openPopup=true) [button href=^#function-CopyToClipboard^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Copies the given string to the clipboard. [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">stringToCopy</td><td>string</td><td>The string to copy.</td></tr><tr><td class="parameter">openPopup=true</td><td>boolean</td><td>Whether to open a popup after copying.</td></tr></table>[/div][div class=^function^ id=^function-CopyToClipboardFromID^][h3]window.<strong class="copyData" data-copy="window.CopyToClipboardFromID(string, boolean)">CopyToClipboardFromID</strong>(string: id, boolean: openPopup=true) [button href=^#function-CopyToClipboardFromID^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Copies the inner text of the element with the given ID to the clipboard. [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">id</td><td>string</td><td>The ID of the element.</td></tr><tr><td class="parameter">openPopup=true</td><td>boolean</td><td>Whether to open a popup after copying.</td></tr></table>[/div][div class=^function^ id=^function-updateTitleAndMeta^][h3]export <strong class="copyData" data-copy="updateTitleAndMeta(string, string)">updateTitleAndMeta</strong>(string: title, string: description) [button href=^#function-updateTitleAndMeta^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Updates the page&#039;s title and meta description. This can be used to dynamically change the information seen by users and search engines based on the current content or context of the page. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">title</td><td>string</td><td>The new title of the page.</td></tr><tr><td class="parameter">description</td><td>string</td><td>The new meta description of the page.</td></tr></table>[/div][div class=^function^ id=^function-roundToHalf^][h3]export <strong class="copyData" data-copy="roundToHalf(number)">roundToHalf</strong>(number: value) [button href=^#function-roundToHalf^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Rounds a numeric value to the nearest half unit. This function is useful for ratings or measurements that are typically represented in half units. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">value</td><td>number</td><td>The value to round.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>number</td><td>The rounded value.</td></tr></table>[/div][div class=^function^ id=^function-roundToFull^][h3]export <strong class="copyData" data-copy="roundToFull(number)">roundToFull</strong>(number: value) [button href=^#function-roundToFull^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Rounds a numeric value to the nearest whole number. This function is useful for counts or other integer-based measurements. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">value</td><td>number</td><td>The value to round.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>number</td><td>The rounded value.</td></tr></table>[/div][div class=^function^ id=^function-setCookie^][h3]export <strong class="copyData" data-copy="setCookie(string, string, number)">setCookie</strong>(string: name, string: value, number: days) [button href=^#function-setCookie^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Sets a cookie with the specified name, value, and expiration days. This function simplifies the process of creating cookies. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the cookie.</td></tr><tr><td class="parameter">value</td><td>string</td><td>The value of the cookie.</td></tr><tr><td class="parameter">days</td><td>number</td><td>The number of days until the cookie expires.</td></tr></table>[/div][div class=^function^ id=^function-getCookie^][h3]export <strong class="copyData" data-copy="getCookie(string)">getCookie</strong>(string: name) [button href=^#function-getCookie^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Retrieves the value of a cookie with the specified name. If the cookie does not exist, null is returned. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the cookie to retrieve.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>string|null</td><td>The value of the cookie or null if it does not exist.</td></tr></table>[/div][div class=^function^ id=^function-deleteAllCookies^][h3]export <strong class="copyData" data-copy="deleteAllCookies()">deleteAllCookies</strong> [button href=^#function-deleteAllCookies^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Deletes all cookies associated with the current domain. This function is useful for clearing session data. [/p][/div][div class=^function^ id=^function-deleteSpecificCookies^][h3]export <strong class="copyData" data-copy="deleteSpecificCookies(Array&lt;string&gt;)">deleteSpecificCookies</strong>(Array&lt;string&gt;: cookieNames) [button href=^#function-deleteSpecificCookies^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Deletes specific cookies by name. This function allows for targeted removal of cookies without affecting others. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">cookieNames</td><td>Array&lt;string&gt;</td><td>An array of cookie names to delete.</td></tr></table>[/div][div class=^function^ id=^function-setSessionStorageItem^][h3]export <strong class="copyData" data-copy="setSessionStorageItem(string, string)">setSessionStorageItem</strong>(string: key, string: value) [button href=^#function-setSessionStorageItem^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Sets an item in the session storage. This function checks if the user has acknowledged storage usage using the getCookie(&quot;storageAcknowledgement&quot;) function before attempting to set the item. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">key</td><td>string</td><td>The key under which to store the item.</td></tr><tr><td class="parameter">value</td><td>string</td><td>The value to store.</td></tr></table>[/div][div class=^function^ id=^function-getSessionStorageItem^][h3]export <strong class="copyData" data-copy="getSessionStorageItem(string)">getSessionStorageItem</strong>(string: key) [button href=^#function-getSessionStorageItem^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Retrieves an item from the session storage. This function checks if the user has acknowledged storage usage using the getCookie(&quot;storageAcknowledgement&quot;) function before attempting to retrieve the item. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">key</td><td>string</td><td>The key of the item to retrieve.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>string|null</td><td>The retrieved item or null if it does not exist.</td></tr></table>[/div][div class=^function^ id=^function-deleteSessionStorageItem^][h3]export <strong class="copyData" data-copy="deleteSessionStorageItem(string)">deleteSessionStorageItem</strong>(string: key) [button href=^#function-deleteSessionStorageItem^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Deletes an item from the session storage. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">key</td><td>string</td><td>The key of the item to delete.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>boolean</td><td>True if the item was successfully deleted, false otherwise.</td></tr></table>[/div][div class=^function^ id=^function-setLocalStorageItem^][h3]export <strong class="copyData" data-copy="setLocalStorageItem(string, string)">setLocalStorageItem</strong>(string: key, string: value) [button href=^#function-setLocalStorageItem^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Sets an item in the local storage. This function checks if the user has acknowledged storage usage using the getCookie(&quot;storageAcknowledgement&quot;) function before attempting to set the item. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">key</td><td>string</td><td>The key under which to store the item.</td></tr><tr><td class="parameter">value</td><td>string</td><td>The value to store.</td></tr></table>[/div][div class=^function^ id=^function-getLocalStorageItem^][h3]export <strong class="copyData" data-copy="getLocalStorageItem(string)">getLocalStorageItem</strong>(string: key) [button href=^#function-getLocalStorageItem^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Retrieves an item from the local storage. This function checks if the user has acknowledged storage usage using the getCookie(&quot;storageAcknowledgement&quot;) function before attempting to retrieve the item. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">key</td><td>string</td><td>The key of the item to retrieve.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>string|null</td><td>The retrieved item or null if it does not exist.</td></tr></table>[/div][div class=^function^ id=^function-deleteLocalStorageItem^][h3]export <strong class="copyData" data-copy="deleteLocalStorageItem(string)">deleteLocalStorageItem</strong>(string: key) [button href=^#function-deleteLocalStorageItem^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Deletes an item from the local storage. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">key</td><td>string</td><td>The key of the item to delete.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>boolean</td><td>True if the item was successfully deleted, false otherwise.</td></tr></table>[/div][div class=^function^ id=^function-deleteSpecificLocalStorageEntries^][h3]export <strong class="copyData" data-copy="deleteSpecificLocalStorageEntries(Array&lt;string&gt;)">deleteSpecificLocalStorageEntries</strong>(Array&lt;string&gt;: keys) [button href=^#function-deleteSpecificLocalStorageEntries^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Deletes specific entries from the local storage. This function allows for targeted removal of multiple local storage items without affecting others. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">keys</td><td>Array&lt;string&gt;</td><td>An array of keys corresponding to the local storage items to delete.</td></tr></table>[/div][div class=^function^ id=^function-getQueryParameterByName^][h3]export <strong class="copyData" data-copy="getQueryParameterByName(string, string)">getQueryParameterByName</strong>(string: name, string: url) [button href=^#function-getQueryParameterByName^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Retrieves the value of a URL query parameter by name. If the parameter does not exist, null is returned. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the query parameter to retrieve.</td></tr><tr><td class="parameter">url</td><td>string</td><td>Optional. The URL to parse. Defaults to the current window&#039;s URL.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>string|null</td><td>The value of the query parameter or null if it does not exist.</td></tr></table>[/div][div class=^function^ id=^function-updateOrAddQueryParameter^][h3]export <strong class="copyData" data-copy="updateOrAddQueryParameter(string, string, string)">updateOrAddQueryParameter</strong>(string: name, string: value, string: url) [button href=^#function-updateOrAddQueryParameter^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Updates or adds a query parameter to the current URL and updates the browser&#039;s history. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the query parameter to update or add.</td></tr><tr><td class="parameter">value</td><td>string</td><td>The value of the query parameter.</td></tr><tr><td class="parameter">url</td><td>string</td><td>Optional. The base URL to modify. Defaults to the current window&#039;s URL.</td></tr></table>[/div][div class=^function^ id=^function-removeQueryParameter^][h3]export <strong class="copyData" data-copy="removeQueryParameter(string, string)">removeQueryParameter</strong>(string: name, string: url) [button href=^#function-removeQueryParameter^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Removes a query parameter from the current URL and updates the browser&#039;s history. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the query parameter to remove.</td></tr><tr><td class="parameter">url</td><td>string</td><td>Optional. The base URL to modify. Defaults to the current window&#039;s URL.</td></tr></table>[/div][div class=^function^ id=^function-loadCSS^][h3]async export <strong class="copyData" data-copy="loadCSS(string, boolean)">loadCSS</strong>(string: url, boolean: forComponent) [button href=^#function-loadCSS^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Loads a CSS file dynamically into the document&#039;s head. If the file is a component-specific stylesheet, it will be marked accordingly for potential removal when the component is unloaded. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">url</td><td>string</td><td>The URL of the CSS file to load.</td></tr><tr><td class="parameter">forComponent</td><td>boolean</td><td>Optional. Specifies whether the CSS is for a specific component, allowing it to be targeted for removal.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;boolean&gt;</td><td>A promise that resolves to true if the CSS file was successfully loaded or false if there was an error.</td></tr></table>[/div][div class=^function^ id=^function-addScript^][h3]export <strong class="copyData" data-copy="addScript(string, boolean)">addScript</strong>(string: src, boolean: async) [button href=^#function-addScript^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Dynamically adds a JavaScript file to the document&#039;s body. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">src</td><td>string</td><td>The URL of the JavaScript file to load.</td></tr><tr><td class="parameter">async</td><td>boolean</td><td>Optional. Specifies whether the script should be loaded asynchronously. Defaults to false.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;boolean&gt;</td><td>A promise that resolves to true if the script was loaded successfully, or false if it failed to load.</td></tr></table>[/div][div class=^function^ id=^function-removeCSS^][h3]export <strong class="copyData" data-copy="removeCSS(string)">removeCSS</strong>(string: url) [button href=^#function-removeCSS^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Removes a CSS file from the document based on its URL. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">url</td><td>string</td><td>The URL of the CSS file to remove.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>boolean</td><td>True if the CSS file was successfully removed, false otherwise.</td></tr></table>[/div][div class=^function^ id=^function-removeAllComponentCSS^][h3]export <strong class="copyData" data-copy="removeAllComponentCSS()">removeAllComponentCSS</strong> [button href=^#function-removeAllComponentCSS^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Removes all component-specific CSS files from the document. This function is typically called when navigating away from a component to ensure its styles do not affect other parts of the application. <br> [/p]<table><tr></tr><tr><th class="returns">Returns</th><td>boolean</td><td>True if any CSS files were removed, false otherwise.</td></tr></table>[/div][div class=^function^ id=^function-alertPopup^][h3]export <strong class="copyData" data-copy="alertPopup(string, string, boolean, string|null)">alertPopup</strong>(string: text, string: content, boolean: showCloseButton, string|null: addedClass) [button href=^#function-alertPopup^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Displays a customizable popup alert with optional content. This function is part of the popup management system and provides a consistent way to display alerts across the application. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">text</td><td>string</td><td>The main text to display in the popup.</td></tr><tr><td class="parameter">content</td><td>string</td><td>Optional additional HTML content to display in the popup.</td></tr><tr><td class="parameter">showCloseButton</td><td>boolean</td><td>Specifies whether to show a close button on the popup.</td></tr><tr><td class="parameter">addedClass</td><td>string|null</td><td>An optional class to add to the popup for styling or identification.</td></tr></table>[/div][div class=^function^ id=^function-alertPopupClose^][h3]export <strong class="copyData" data-copy="alertPopupClose(string|null)">alertPopupClose</strong>(string|null: addedClass) [button href=^#function-alertPopupClose^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Closes an open alert popup. If a specific class was added to the popup when it was opened, it can be specified here to ensure only popups with that class are closed. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">addedClass</td><td>string|null</td><td>The class that was added to the popup, if any.</td></tr></table>[/div][div class=^function^ id=^function-assignMenuButtons^][h3]export <strong class="copyData" data-copy="assignMenuButtons()">assignMenuButtons</strong> [button href=^#function-assignMenuButtons^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Assigns click event listeners to menu buttons. This function is part of the popup management system and ensures that clicking any menu button opens the corresponding popup. <br> <br> The function targets buttons with either the ID &#039;menuButton&#039; or the class &#039;openMenuButton&#039;. <br> <br> This function is typically called automatically when the page loads, but might need to be called manually when buttons are added dynamically or when existing buttons are replaced. [/p][/div]
[h1]analytics.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/src\modules\analytics.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This module is designed to be used as a part of an analytics system.[/p][h2 id=^functions^][button href=^#functions^ class=^copyLink^]Functions<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^function^ id=^function-Analytics^][h3]DEFAULT async export <strong class="copyData" data-copy="Analytics(any)">Analytics</strong>(any: value) [button href=^#function-Analytics^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Sends analytics data by triggering a custom hook. This function is designed to be used as a part of an analytics system, where `value` represents the analytics data to be sent. Use the `send-analytics` hook to send analytics data. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">value</td><td>any</td><td>- The analytics data to be sent. This could be an event name, user action, or any other relevant data.</td></tr></table>[/div]
[h1]database-settings.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/src\modules\database-settings.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This module is designed to be used as a part of a database settings system.[/p][h2 id=^functions^][button href=^#functions^ class=^copyLink^]Functions<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^function^ id=^function-getSetting^][h3]async export <strong class="copyData" data-copy="getSetting(string, boolean)">getSetting</strong>(string: name, boolean: useCache=false) [button href=^#function-getSetting^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Retrieves a setting value from the database, if the database-get-setting hook is implemented. It can optionally use cache based on the `useCache` parameter. If an error occurs during retrieval, it logs the error and returns null. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the setting to retrieve.</td></tr><tr><td class="parameter">useCache=false</td><td>boolean</td><td>Determines whether to give the &#039;no-store&#039; or &#039;default&#039; cache setting to the database-get-setting hook.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;any|null&gt;</td><td>The value of the setting if found and no error occurs, otherwise null.</td></tr></table>[/div][div class=^function^ id=^function-setSetting^][h3]async export <strong class="copyData" data-copy="setSetting(string, any)">setSetting</strong>(string: name, any: value) [button href=^#function-setSetting^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Sets a setting value in the database, if the database-set-setting hook is implemented. If an error occurs during setting, it logs the error and returns false. [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the setting to set.</td></tr><tr><td class="parameter">value</td><td>any</td><td>The value of the setting to set.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;boolean&gt;</td><td>True if the setting was successfully set, false if an error occurs.</td></tr></table>[/div]
[h1]hooks.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/src\modules\hooks.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This file defines a simple hook system for managing and triggering custom events or hooks within the application. It allows for registering callback functions to specific event names and triggering those callbacks with custom arguments. The system also caches the last callback registered for each event for quicker access.[/p][h2 id=^functions^][button href=^#functions^ class=^copyLink^]Functions<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^function^ id=^function-hook^][h3]window.<strong class="copyData" data-copy="window.hook(string, Function)">hook</strong>(string: name, Function: callback) [button href=^#function-hook^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Registers a callback function for a given hook name. If the hook doesn&#039;t exist, it initializes an array for that hook. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the hook to register the callback for.</td></tr><tr><td class="parameter">callback</td><td>Function</td><td>The callback function to register.</td></tr></table>[/div][div class=^function^ id=^function-triggerHook^][h3]async window.<strong class="copyData" data-copy="window.triggerHook(string, ...any)">triggerHook</strong>(string: name, ...any: args) [button href=^#function-triggerHook^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Triggers a hook asynchronously by name, executing all registered callbacks for it with any provided arguments. If no hook is registered under the provided name, it returns null. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the hook to trigger.</td></tr><tr><td class="parameter">args</td><td>...any</td><td>Arguments to pass to the callback functions.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;any[]&gt;|Promise&lt;any&gt;</td><td>The results of the triggered hook callbacks or a single result if only one callback is registered.</td></tr></table>[/div][div class=^function^ id=^function-triggerHookAsync^][h3]window.<strong class="copyData" data-copy="window.triggerHookAsync(string, ...any)">triggerHookAsync</strong>(string: name, ...any: args) [button href=^#function-triggerHookAsync^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Calls triggerHook to trigger a hook asynchronously by name (alias for triggerHook). <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the hook to trigger.</td></tr><tr><td class="parameter">args</td><td>...any</td><td>Arguments to pass to the callback functions.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;any[]&gt;|Promise&lt;any&gt;</td><td>The results of the triggered hook callbacks or a single result if only one callback is registered.</td></tr></table>[/div][div class=^function^ id=^function-triggerHookSync^][h3]window.<strong class="copyData" data-copy="window.triggerHookSync(string, ...any)">triggerHookSync</strong>(string: name, ...any: args) [button href=^#function-triggerHookSync^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Triggers a hook synchronously by name, executing all registered callbacks for it with any provided arguments. If no hook is registered under the provided name, it returns null. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the hook to trigger.</td></tr><tr><td class="parameter">args</td><td>...any</td><td>Arguments to pass to the callback functions.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;any[]&gt;|Promise&lt;any&gt;</td><td>The results of the triggered hook callbacks or a single result if only one callback is registered.</td></tr></table>[/div][div class=^function^ id=^function-removeHook^][h3]window.<strong class="copyData" data-copy="window.removeHook(string, Function)">removeHook</strong>(string: name, Function: callback) [button href=^#function-removeHook^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Removes a specific callback from a hook. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">name</td><td>string</td><td>The name of the hook.</td></tr><tr><td class="parameter">callback</td><td>Function</td><td>The callback function to remove.</td></tr></table>[/div][div class=^function^ id=^function-clearHooks^][h3]window.<strong class="copyData" data-copy="window.clearHooks(string)">clearHooks</strong>(string: [name]) [button href=^#function-clearHooks^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Clears all hooks for a given name or all hooks if no name is provided. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">[name]</td><td>string</td><td>The name of the hook to clear. If not provided, clears all hooks.</td></tr></table>[/div]
[h1]image-comparison-slider.css[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/src\modules\image-comparison-slider\image-comparison-slider.css^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This is the css file for the image comparison slider module.[/p]
[h1]image-comparison-slider.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/src\modules\image-comparison-slider\image-comparison-slider.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This script enables image comparison functionality by providing an interactive way to compare two images side by side. <br><br>You don't need to call this function. Just set the "enableImageComparisonSliders" property to true in the config.js file. Then main.js will call this function. <br><br>Users can click and drag a splitter to reveal more or less of each image.[/p][h2 id=^functions^][button href=^#functions^ class=^copyLink^]Functions<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^function^ id=^function-initImageComparisons^][h3]export <strong class="copyData" data-copy="initImageComparisons()">initImageComparisons</strong> [button href=^#function-initImageComparisons^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Initializes image comparison sliders found within the document. Each image comparison slider allows users to interactively compare two images by clicking and dragging a central splitter. This function identifies all elements with a specific class designating them as image comparison splitters and sets up the necessary event listeners to handle user interactions, such as dragging the splitter. <br> <br> The initialization process includes setting up mouse and touch event listeners to handle the dragging action, adjusting the position of the splitter based on user input, and updating the visible portion of the images based on the splitter&#039;s position. It also ensures that the splitter&#039;s position is correctly reset when the browser window is resized. [/p][/div]
[h1]LICENSE.txt[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/src\modules\image-comparison-slider\LICENSE.txt^]view this file on GitHub[/a].[/p][p class=^justify^]The folllowing License only applies to the image comparison slider module, which is based on the image comparison slider of Paul Browne (https://github.com/Paul-Browne/image-comparison-slider):[/p][p class=^justify^]MIT License[/p][p class=^justify^]Copyright (c) 2017 paulbrowne[/p][p class=^justify^]Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:[/p][p class=^justify^]The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.[/p][p class=^justify^]THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. [/p]
[h1]infinite-scroll.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/src\modules\infinite-scroll.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]Implements an infinite scroll mechanism for dynamically loading content as the user scrolls. The script supports customizable settings for initial items, incremental load amounts, and integrates with local or session storage for caching purposes.[/p][h2 id=^functions^][button href=^#functions^ class=^copyLink^]Functions<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^function^ id=^function-InfiniteScroll^][h3]DEFAULT export <strong class="copyData" data-copy="InfiniteScroll(Object)">InfiniteScroll</strong>(Object: config) [button href=^#function-InfiniteScroll^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Initializes an infinite scroll functionality on a specified container. <br> <br> Configuration object: <br> - initialLimit: The initial number of items to load. <br> - add: Number of items to add with each additional load. <br> - page: Starting page number. <br> - container: DOM element to append fetched items to. <br> - scrollContainer: DOM element to attach the scroll event listener to, which will trigger the loading of more content when the user scrolls to the bottom. <br> - fetchURL: URL to fetch data from. <br> - displayFunction: Function to process and display fetched items. <br> - searchParameter: Function returning current search parameters. <br> - emptyMessage: Message to display when no items are available. <br> - storageType: &#039;local&#039; or &#039;session&#039; to enable caching. If not provided, caching is disabled. [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">config</td><td>Object</td><td>Configuration object for infinite scroll as defined above.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Object</td><td>An object containing methods to setup, teardown, handleScroll, and refresh the infinite scroll functionality.</td></tr></table>[/div]
[h1]input-validation.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/src\modules\input-validation.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This file provides functionality for validating input and textarea elements across the application. <br><br>It integrates both client-side and server-side validation mechanisms, debouncing calls to improve performance. <br><br>When `enableInputValidation` is set to true in `config.js`, `main.js` automatically initializes this validation process. So there is probably no need to call these functions manually, except for the clearError function, when implementing custom validation logic through the `validate-field` hook or maybe the `validateEmail` function.[/p][h2 id=^functions^][button href=^#functions^ class=^copyLink^]Functions<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^function^ id=^function-initializeInputValidation^][h3]export <strong class="copyData" data-copy="initializeInputValidation()">initializeInputValidation</strong> [button href=^#function-initializeInputValidation^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Attaches event listeners to the document body to perform input validation on all input and textarea elements. This function is automatically called if input validation is enabled in the application configuration. [/p][/div][div class=^function^ id=^function-validateInputs^][h3]export <strong class="copyData" data-copy="validateInputs(Event)">validateInputs</strong>(Event: event) [button href=^#function-validateInputs^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Validates input elements on the document body by debouncing and calling validation functions. It distinguishes between client-side and server-side validation depending on the input&#039;s requirements. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">event</td><td>Event</td><td>The DOM event triggered by user interaction with input or textarea elements.</td></tr></table>[/div][div class=^function^ id=^function-validateInputClient^][h3]async export <strong class="copyData" data-copy="validateInputClient(Event)">validateInputClient</strong>(Event: event) [button href=^#function-validateInputClient^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Debounced wrapper for client-side validation of input elements. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">event</td><td>Event</td><td>The DOM event triggered by user interaction with input or textarea elements.</td></tr></table>[/div][div class=^function^ id=^function-validateInputServer^][h3]async export <strong class="copyData" data-copy="validateInputServer(Event)">validateInputServer</strong>(Event: event) [button href=^#function-validateInputServer^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Debounced wrapper for server-side validation of input elements. This validation may involve asynchronous checks with the server to validate the input&#039;s content. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">event</td><td>Event</td><td>The DOM event triggered by user interaction with input or textarea elements.</td></tr></table>[/div][div class=^function^ id=^function-displayError^][h3]export <strong class="copyData" data-copy="displayError(HTMLElement, HTMLElement, string)">displayError</strong>(HTMLElement: input, HTMLElement: errorElement, string: message=&#039;&#039;) [button href=^#function-displayError^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Displays an error message associated with an input element. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">input</td><td>HTMLElement</td><td>The input element that has encountered a validation error.</td></tr><tr><td class="parameter">errorElement</td><td>HTMLElement</td><td>The DOM element where the error message will be displayed.</td></tr><tr><td class="parameter">message=&#039;&#039;</td><td>string</td><td>The error message to display. If not provided, no message will be displayed.</td></tr></table>[/div][div class=^function^ id=^function-clearError^][h3]export <strong class="copyData" data-copy="clearError(HTMLElement, HTMLElement)">clearError</strong>(HTMLElement: input, HTMLElement: errorElement) [button href=^#function-clearError^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Clears any displayed error message associated with an input element. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">input</td><td>HTMLElement</td><td>The input element for which to clear the validation error.</td></tr><tr><td class="parameter">errorElement</td><td>HTMLElement</td><td>The DOM element that currently displays the error message.</td></tr></table>[/div][div class=^function^ id=^function-validateField^][h3]async export <strong class="copyData" data-copy="validateField(HTMLElement, HTMLElement, boolean)">validateField</strong>(HTMLElement: input, HTMLElement: errorElement, boolean: serverSide=true) [button href=^#function-validateField^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Performs the actual validation of an input field. This function is called by both client-side and server-side validation handlers. It checks for common validation criteria such as minimum length, maximum length, and email format. <br> This is were the `validate-field` hook is triggered, allowing for custom validation logic to be implemented. If the hook returns false, the error message is not cleared. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">input</td><td>HTMLElement</td><td>The input element to validate.</td></tr><tr><td class="parameter">errorElement</td><td>HTMLElement</td><td>The element to display error messages in.</td></tr><tr><td class="parameter">serverSide=true</td><td>boolean</td><td>Determines whether the validation should consider server-side logic.</td></tr></table>[/div][div class=^function^ id=^function-validateEmail^][h3]export <strong class="copyData" data-copy="validateEmail(string)">validateEmail</strong>(string: email) [button href=^#function-validateEmail^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Validates whether a given string is a valid email address. <br> [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">email</td><td>string</td><td>The email address to validate.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>boolean</td><td>Returns true if the email address is valid, false otherwise.</td></tr></table>[/div]
[h1]markdown.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/src\modules\markdown.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]The Birdhdouse markdown module provides a function to transform custom Birdhouse markdown input into HTML, applying pattern replacements and preprocessing.[/p][h2 id=^variables^][button href=^#variables^ class=^copyLink^]Variables<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^variable^ id=^variable-markdownElements^][h3]export <strong class="copyData" data-copy="markdownElements">markdownElements</strong> (const Object&lt;string, string&gt;) [button href=^#variable-markdownElements^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^]Defines markdown elements with their Birdhouse markdown representations. Provides a mapping of common HTML elements to their Birdhouse markdown format for easy reference.[/p][/div][h2 id=^functions^][button href=^#functions^ class=^copyLink^]Functions<span class="material-icons spaceLeft">link</span>[/button][/h2][div class=^function^ id=^function-markdown^][h3]async export <strong class="copyData" data-copy="markdown(string)">markdown</strong>(string: input) [button href=^#function-markdown^ class=^copyLink^]<span class="material-icons">link</span>[/button][/h3][p class=^justify^] Transforms custom Birdhouse markdown input into HTML, applying pattern replacements and preprocessing. [/p]<table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td class="parameter">input</td><td>string</td><td>Birdhouse markdown input to be transformed.</td></tr><tr></tr><tr><th class="returns">Returns</th><td>Promise&lt;string&gt;</td><td>The transformed HTML output.</td></tr></table>[/div]
[h1]popupManager.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/src\modules\popupManager.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This file defines the PopupManager class responsible for managing popups throughout the application. It handles the opening and closing of popups, ensuring that focus management and accessibility are taken into account. <br><br>The PopupManager is automatically instantiated in `main.js`, where a global reference is maintained for easy access across the application. Use this class to programmatically control popups, such as opening a popup when a button is clicked or closing it when the user interacts with a close button. <br><br>You can import the `popupManager` instance from `main.js` to access the PopupManager class and its methods: `openPopup` and `closePopup`. Use popupManager.openPopup(popupID) to open a popup by its ID and popupManager.closePopup(popupID) to close a popup by its ID.[/p]
[h1]start-package.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/start-package.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This feature is in an experimental state and may not be suitable for all use cases. Please use with caution and report any issues you encounter. <br><br>This Node.js script, starts the Electron packaging process for Birdhouse.[/p]
[h1]start-server.js[/h1]
[p]You can [a href=^https://github.com/HousebirdGames/Birdhouse/blob/main/start-server.js^]view this file on GitHub[/a].[/p][p class=^topComment justify^]This feature is in an experimental state and may not be suitable for all use cases. Please use with caution and report any issues you encounter. <br><br>This Node.js script, starts the local server for Birdhouse.[/p]
